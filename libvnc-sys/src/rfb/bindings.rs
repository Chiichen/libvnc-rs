/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 38;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const LIBVNCSERVER_ALLOW24BPP: u32 = 1;
pub const LIBVNCSERVER_HAVE_DIRENT_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_ENDIAN_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_FCNTL_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_GETTIMEOFDAY: u32 = 1;
pub const LIBVNCSERVER_HAVE_FTIME: u32 = 1;
pub const LIBVNCSERVER_HAVE_GETHOSTBYNAME: u32 = 1;
pub const LIBVNCSERVER_HAVE_GETHOSTNAME: u32 = 1;
pub const LIBVNCSERVER_HAVE_INET_NTOA: u32 = 1;
pub const LIBVNCSERVER_HAVE_MEMMOVE: u32 = 1;
pub const LIBVNCSERVER_HAVE_MEMSET: u32 = 1;
pub const LIBVNCSERVER_HAVE_MKFIFO: u32 = 1;
pub const LIBVNCSERVER_HAVE_SELECT: u32 = 1;
pub const LIBVNCSERVER_HAVE_SOCKET: u32 = 1;
pub const LIBVNCSERVER_HAVE_STRCHR: u32 = 1;
pub const LIBVNCSERVER_HAVE_STRCSPN: u32 = 1;
pub const LIBVNCSERVER_HAVE_STRDUP: u32 = 1;
pub const LIBVNCSERVER_HAVE_STRERROR: u32 = 1;
pub const LIBVNCSERVER_HAVE_STRSTR: u32 = 1;
pub const LIBVNCSERVER_HAVE_LIBJPEG: u32 = 1;
pub const LIBVNCSERVER_HAVE_LIBPNG: u32 = 1;
pub const LIBVNCSERVER_HAVE_LIBPTHREAD: u32 = 1;
pub const LIBVNCSERVER_HAVE_LIBZ: u32 = 1;
pub const LIBVNCSERVER_HAVE_NETINET_IN_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_SYS_SOCKET_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_SYS_STAT_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_SYS_TIME_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_SYS_TYPES_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_SYS_WAIT_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_UNISTD_H: u32 = 1;
pub const LIBVNCSERVER_HAVE_VFORK: u32 = 1;
pub const LIBVNCSERVER_HAVE_VPRINTF: u32 = 1;
pub const LIBVNCSERVER_HAVE_MMAP: u32 = 1;
pub const LIBVNCSERVER_HAVE_FORK: u32 = 1;
pub const LIBVNCSERVER_IPv6: u32 = 1;
pub const LIBVNCSERVER_PACKAGE_STRING: &[u8; 20] = b"LibVNCServer 0.9.14\0";
pub const LIBVNCSERVER_PACKAGE_VERSION: &[u8; 7] = b"0.9.14\0";
pub const LIBVNCSERVER_VERSION: &[u8; 7] = b"0.9.14\0";
pub const LIBVNCSERVER_VERSION_MAJOR: &[u8; 2] = b"0\0";
pub const LIBVNCSERVER_VERSION_MINOR: &[u8; 2] = b"9\0";
pub const LIBVNCSERVER_VERSION_PATCHLEVEL: &[u8; 3] = b"14\0";
pub const LIBVNCSERVER_HAVE_LIBGCRYPT: u32 = 1;
pub const LIBVNCSERVER_HAVE_LIBSSL: u32 = 1;
pub const LIBVNCSERVER_WITH_WEBSOCKETS: u32 = 1;
pub const HAVE_LIBVNCSERVER_PID_T: u32 = 1;
pub const HAVE_LIBVNCSERVER_SIZE_T: u32 = 1;
pub const HAVE_LIBVNCSERVER_SOCKLEN_T: u32 = 1;
pub const MAX_MEM_LEVEL: u32 = 9;
pub const MAX_WBITS: u32 = 15;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const ZLIB_VERSION: &[u8; 7] = b"1.2.13\0";
pub const ZLIB_VERNUM: u32 = 4816;
pub const ZLIB_VER_MAJOR: u32 = 1;
pub const ZLIB_VER_MINOR: u32 = 2;
pub const ZLIB_VER_REVISION: u32 = 13;
pub const ZLIB_VER_SUBREVISION: u32 = 0;
pub const Z_NO_FLUSH: u32 = 0;
pub const Z_PARTIAL_FLUSH: u32 = 1;
pub const Z_SYNC_FLUSH: u32 = 2;
pub const Z_FULL_FLUSH: u32 = 3;
pub const Z_FINISH: u32 = 4;
pub const Z_BLOCK: u32 = 5;
pub const Z_TREES: u32 = 6;
pub const Z_OK: u32 = 0;
pub const Z_STREAM_END: u32 = 1;
pub const Z_NEED_DICT: u32 = 2;
pub const Z_ERRNO: i32 = -1;
pub const Z_STREAM_ERROR: i32 = -2;
pub const Z_DATA_ERROR: i32 = -3;
pub const Z_MEM_ERROR: i32 = -4;
pub const Z_BUF_ERROR: i32 = -5;
pub const Z_VERSION_ERROR: i32 = -6;
pub const Z_NO_COMPRESSION: u32 = 0;
pub const Z_BEST_SPEED: u32 = 1;
pub const Z_BEST_COMPRESSION: u32 = 9;
pub const Z_DEFAULT_COMPRESSION: i32 = -1;
pub const Z_FILTERED: u32 = 1;
pub const Z_HUFFMAN_ONLY: u32 = 2;
pub const Z_RLE: u32 = 3;
pub const Z_FIXED: u32 = 4;
pub const Z_DEFAULT_STRATEGY: u32 = 0;
pub const Z_BINARY: u32 = 0;
pub const Z_TEXT: u32 = 1;
pub const Z_ASCII: u32 = 1;
pub const Z_UNKNOWN: u32 = 2;
pub const Z_DEFLATED: u32 = 8;
pub const Z_NULL: u32 = 0;
pub const _SYS_TIME_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOL_SMC: u32 = 286;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_PASSPIDFD: u32 = 76;
pub const SO_PEERPIDFD: u32 = 77;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const IP_LOCAL_PORT_RANGE: u32 = 51;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const RFB_INVALID_SOCKET: i32 = -1;
pub const FALSE: u32 = 0;
pub const TRUE: i32 = -1;
pub const MAX_ENCODINGS: u32 = 64;
pub const sz_rfbRectangle: u32 = 8;
pub const sz_rfbPixelFormat: u32 = 16;
pub const rfbPFFullColors: u32 = 0;
pub const rfbPF256Colors: u32 = 1;
pub const rfbPF64Colors: u32 = 2;
pub const rfbPF8Colors: u32 = 3;
pub const rfbPF8GreyColors: u32 = 4;
pub const rfbPF4GreyColors: u32 = 5;
pub const rfbPF2GreyColors: u32 = 6;
pub const rfbProtocolVersionFormat: &[u8; 15] = b"RFB %03d.%03d\n\0";
pub const rfbProtocolMajorVersion: u32 = 3;
pub const rfbProtocolMinorVersion: u32 = 8;
pub const sz_rfbProtocolVersionMsg: u32 = 12;
pub const rfbSecTypeInvalid: u32 = 0;
pub const rfbSecTypeNone: u32 = 1;
pub const rfbSecTypeVncAuth: u32 = 2;
pub const rfbConnFailed: u32 = 0;
pub const rfbNoAuth: u32 = 1;
pub const rfbVncAuth: u32 = 2;
pub const rfbRA2: u32 = 5;
pub const rfbRA2ne: u32 = 6;
pub const rfbSSPI: u32 = 7;
pub const rfbSSPIne: u32 = 8;
pub const rfbTight: u32 = 16;
pub const rfbUltra: u32 = 17;
pub const rfbTLS: u32 = 18;
pub const rfbVeNCrypt: u32 = 19;
pub const rfbSASL: u32 = 20;
pub const rfbARD: u32 = 30;
pub const rfbUltraMSLogonI: u32 = 112;
pub const rfbUltraMSLogonII: u32 = 113;
pub const rfbMSLogon: u32 = 4294967290;
pub const rfbVeNCryptPlain: u32 = 256;
pub const rfbVeNCryptTLSNone: u32 = 257;
pub const rfbVeNCryptTLSVNC: u32 = 258;
pub const rfbVeNCryptTLSPlain: u32 = 259;
pub const rfbVeNCryptX509None: u32 = 260;
pub const rfbVeNCryptX509VNC: u32 = 261;
pub const rfbVeNCryptX509Plain: u32 = 262;
pub const rfbVeNCryptX509SASL: u32 = 263;
pub const rfbVeNCryptTLSSASL: u32 = 264;
pub const rfbVncAuthOK: u32 = 0;
pub const rfbVncAuthFailed: u32 = 1;
pub const rfbVncAuthTooMany: u32 = 2;
pub const sz_rfbClientInitMsg: u32 = 1;
pub const sz_rfbServerInitMsg: u32 = 24;
pub const rfbFramebufferUpdate: u32 = 0;
pub const rfbSetColourMapEntries: u32 = 1;
pub const rfbBell: u32 = 2;
pub const rfbServerCutText: u32 = 3;
pub const rfbResizeFrameBuffer: u32 = 4;
pub const rfbPalmVNCReSizeFrameBuffer: u32 = 15;
pub const rfbSetPixelFormat: u32 = 0;
pub const rfbFixColourMapEntries: u32 = 1;
pub const rfbSetEncodings: u32 = 2;
pub const rfbFramebufferUpdateRequest: u32 = 3;
pub const rfbKeyEvent: u32 = 4;
pub const rfbPointerEvent: u32 = 5;
pub const rfbClientCutText: u32 = 6;
pub const rfbFileTransfer: u32 = 7;
pub const rfbSetScale: u32 = 8;
pub const rfbSetServerInput: u32 = 9;
pub const rfbSetSW: u32 = 10;
pub const rfbTextChat: u32 = 11;
pub const rfbPalmVNCSetScaleFactor: u32 = 15;
pub const rfbXvp: u32 = 250;
pub const rfbSetDesktopSize: u32 = 251;
pub const rfbQemuEvent: u32 = 255;
pub const rfbEncodingRaw: u32 = 0;
pub const rfbEncodingCopyRect: u32 = 1;
pub const rfbEncodingRRE: u32 = 2;
pub const rfbEncodingCoRRE: u32 = 4;
pub const rfbEncodingHextile: u32 = 5;
pub const rfbEncodingZlib: u32 = 6;
pub const rfbEncodingTight: u32 = 7;
pub const rfbEncodingTightPng: u32 = 4294967036;
pub const rfbEncodingZlibHex: u32 = 8;
pub const rfbEncodingUltra: u32 = 9;
pub const rfbEncodingTRLE: u32 = 15;
pub const rfbEncodingZRLE: u32 = 16;
pub const rfbEncodingZYWRLE: u32 = 17;
pub const rfbEncodingH264: u32 = 1211250228;
pub const rfbEncodingCache: u32 = 4294901760;
pub const rfbEncodingCacheEnable: u32 = 4294901761;
pub const rfbEncodingXOR_Zlib: u32 = 4294901762;
pub const rfbEncodingXORMonoColor_Zlib: u32 = 4294901763;
pub const rfbEncodingXORMultiColor_Zlib: u32 = 4294901764;
pub const rfbEncodingSolidColor: u32 = 4294901765;
pub const rfbEncodingXOREnable: u32 = 4294901766;
pub const rfbEncodingCacheZip: u32 = 4294901767;
pub const rfbEncodingSolMonoZip: u32 = 4294901768;
pub const rfbEncodingUltraZip: u32 = 4294901769;
pub const rfbEncodingXvp: u32 = 4294966987;
pub const rfbEncodingFineQualityLevel0: u32 = 4294966784;
pub const rfbEncodingFineQualityLevel100: u32 = 4294966884;
pub const rfbEncodingSubsamp1X: u32 = 4294966528;
pub const rfbEncodingSubsamp4X: u32 = 4294966529;
pub const rfbEncodingSubsamp2X: u32 = 4294966530;
pub const rfbEncodingSubsampGray: u32 = 4294966531;
pub const rfbEncodingSubsamp8X: u32 = 4294966532;
pub const rfbEncodingSubsamp16X: u32 = 4294966533;
pub const rfbEncodingCompressLevel0: u32 = 4294967040;
pub const rfbEncodingCompressLevel1: u32 = 4294967041;
pub const rfbEncodingCompressLevel2: u32 = 4294967042;
pub const rfbEncodingCompressLevel3: u32 = 4294967043;
pub const rfbEncodingCompressLevel4: u32 = 4294967044;
pub const rfbEncodingCompressLevel5: u32 = 4294967045;
pub const rfbEncodingCompressLevel6: u32 = 4294967046;
pub const rfbEncodingCompressLevel7: u32 = 4294967047;
pub const rfbEncodingCompressLevel8: u32 = 4294967048;
pub const rfbEncodingCompressLevel9: u32 = 4294967049;
pub const rfbEncodingXCursor: u32 = 4294967056;
pub const rfbEncodingRichCursor: u32 = 4294967057;
pub const rfbEncodingPointerPos: u32 = 4294967064;
pub const rfbEncodingLastRect: u32 = 4294967072;
pub const rfbEncodingNewFBSize: u32 = 4294967073;
pub const rfbEncodingExtDesktopSize: u32 = 4294966988;
pub const rfbEncodingQualityLevel0: u32 = 4294967264;
pub const rfbEncodingQualityLevel1: u32 = 4294967265;
pub const rfbEncodingQualityLevel2: u32 = 4294967266;
pub const rfbEncodingQualityLevel3: u32 = 4294967267;
pub const rfbEncodingQualityLevel4: u32 = 4294967268;
pub const rfbEncodingQualityLevel5: u32 = 4294967269;
pub const rfbEncodingQualityLevel6: u32 = 4294967270;
pub const rfbEncodingQualityLevel7: u32 = 4294967271;
pub const rfbEncodingQualityLevel8: u32 = 4294967272;
pub const rfbEncodingQualityLevel9: u32 = 4294967273;
pub const rfbEncodingQemuExtendedKeyEvent: u32 = 4294967038;
pub const rfbEncodingExtendedClipboard: u32 = 3231835598;
pub const rfbEncodingKeyboardLedState: u32 = 4294836224;
pub const rfbEncodingSupportedMessages: u32 = 4294836225;
pub const rfbEncodingSupportedEncodings: u32 = 4294836226;
pub const rfbEncodingServerIdentity: u32 = 4294836227;
pub const sz_rfbFramebufferUpdateMsg: u32 = 4;
pub const sz_rfbFramebufferUpdateRectHeader: u32 = 12;
pub const sz_rfbSupportedMessages: u32 = 64;
pub const rfbKeyboardMaskShift: u32 = 1;
pub const rfbKeyboardMaskCapsLock: u32 = 2;
pub const rfbKeyboardMaskControl: u32 = 4;
pub const rfbKeyboardMaskAlt: u32 = 8;
pub const rfbKeyboardMaskMeta: u32 = 16;
pub const rfbKeyboardMaskSuper: u32 = 32;
pub const rfbKeyboardMaskHyper: u32 = 64;
pub const rfbKeyboardMaskNumLock: u32 = 128;
pub const rfbKeyboardMaskScrollLock: u32 = 256;
pub const rfbKeyboardMaskAltGraph: u32 = 512;
pub const sz_rfbCopyRect: u32 = 4;
pub const sz_rfbRREHeader: u32 = 4;
pub const sz_rfbCoRRERectangle: u32 = 4;
pub const rfbHextileRaw: u32 = 1;
pub const rfbHextileBackgroundSpecified: u32 = 2;
pub const rfbHextileForegroundSpecified: u32 = 4;
pub const rfbHextileAnySubrects: u32 = 8;
pub const rfbHextileSubrectsColoured: u32 = 16;
pub const sz_rfbZlibHeader: u32 = 4;
pub const rfbTightExplicitFilter: u32 = 4;
pub const rfbTightFill: u32 = 8;
pub const rfbTightJpeg: u32 = 9;
pub const rfbTightNoZlib: u32 = 10;
pub const rfbTightPng: u32 = 10;
pub const rfbTightMaxSubencoding: u32 = 10;
pub const rfbTightFilterCopy: u32 = 0;
pub const rfbTightFilterPalette: u32 = 1;
pub const rfbTightFilterGradient: u32 = 2;
pub const sz_rfbXCursorColors: u32 = 6;
pub const sz_rfbZRLEHeader: u32 = 4;
pub const rfbZRLETileWidth: u32 = 64;
pub const rfbZRLETileHeight: u32 = 64;
pub const rfbHextileZlibRaw: u32 = 32;
pub const rfbHextileZlibHex: u32 = 64;
pub const rfbHextileZlibMono: u32 = 128;
pub const sz_rfbSetColourMapEntriesMsg: u32 = 6;
pub const sz_rfbBellMsg: u32 = 1;
pub const sz_rfbServerCutTextMsg: u32 = 8;
pub const sz_rfbFileTransferMsg: u32 = 12;
pub const rfbFileTransferVersion: u32 = 2;
pub const rfbDirContentRequest: u32 = 1;
pub const rfbDirPacket: u32 = 2;
pub const rfbFileTransferRequest: u32 = 3;
pub const rfbFileHeader: u32 = 4;
pub const rfbFilePacket: u32 = 5;
pub const rfbEndOfFile: u32 = 6;
pub const rfbAbortFileTransfer: u32 = 7;
pub const rfbFileTransferOffer: u32 = 8;
pub const rfbFileAcceptHeader: u32 = 9;
pub const rfbCommand: u32 = 10;
pub const rfbCommandReturn: u32 = 11;
pub const rfbFileChecksums: u32 = 12;
pub const rfbFileTransferAccess: u32 = 14;
pub const rfbRDirContent: u32 = 1;
pub const rfbRDrivesList: u32 = 2;
pub const rfbRDirRecursiveList: u32 = 3;
pub const rfbRDirRecursiveSize: u32 = 4;
pub const rfbADirectory: u32 = 1;
pub const rfbAFile: u32 = 2;
pub const rfbADrivesList: u32 = 3;
pub const rfbADirCreate: u32 = 4;
pub const rfbADirDelete: u32 = 5;
pub const rfbAFileCreate: u32 = 6;
pub const rfbAFileDelete: u32 = 7;
pub const rfbAFileRename: u32 = 8;
pub const rfbADirRename: u32 = 9;
pub const rfbADirRecursiveListItem: u32 = 10;
pub const rfbADirRecursiveSize: u32 = 11;
pub const rfbCDirCreate: u32 = 1;
pub const rfbCDirDelete: u32 = 2;
pub const rfbCFileCreate: u32 = 3;
pub const rfbCFileDelete: u32 = 4;
pub const rfbCFileRename: u32 = 5;
pub const rfbCDirRename: u32 = 6;
pub const rfbRErrorUnknownCmd: u32 = 1;
pub const rfbRErrorCmd: u32 = 4294967295;
pub const sz_rfbBlockSize: u32 = 8192;
pub const rfbZipDirectoryPrefix: &[u8; 11] = b"!UVNCDIR-\0\0";
pub const sz_rfbZipDirectoryPrefix: u32 = 9;
pub const rfbDirPrefix: &[u8; 3] = b"[ \0";
pub const rfbDirSuffix: &[u8; 3] = b" ]\0";
pub const sz_rfbTextChatMsg: u32 = 8;
pub const rfbTextMaxSize: u32 = 4096;
pub const rfbTextChatOpen: u32 = 4294967295;
pub const rfbTextChatClose: u32 = 4294967294;
pub const rfbTextChatFinished: u32 = 4294967293;
pub const sz_rfbXvpMsg: u32 = 4;
pub const rfbXvp_Fail: u32 = 0;
pub const rfbXvp_Init: u32 = 1;
pub const rfbXvp_Shutdown: u32 = 2;
pub const rfbXvp_Reboot: u32 = 3;
pub const rfbXvp_Reset: u32 = 4;
pub const sz_rfbExtDesktopSizeMsg: u32 = 4;
pub const sz_rfbExtDesktopScreen: u32 = 16;
pub const rfbExtDesktopSize_GenericChange: u32 = 0;
pub const rfbExtDesktopSize_ClientRequestedChange: u32 = 1;
pub const rfbExtDesktopSize_OtherClientRequestedChange: u32 = 2;
pub const rfbExtDesktopSize_Success: u32 = 0;
pub const rfbExtDesktopSize_ResizeProhibited: u32 = 1;
pub const rfbExtDesktopSize_OutOfResources: u32 = 2;
pub const rfbExtDesktopSize_InvalidScreenLayout: u32 = 3;
pub const sz_rfbSetDesktopSizeMsg: u32 = 8;
pub const sz_rfbResizeFrameBufferMsg: u32 = 6;
pub const sz_rfbPalmVNCReSizeFrameBufferMsg: u32 = 12;
pub const sz_rfbCacheRect: u32 = 2;
pub const sz_rfbSetPixelFormatMsg: u32 = 20;
pub const sz_rfbFixColourMapEntriesMsg: u32 = 6;
pub const sz_rfbSetEncodingsMsg: u32 = 4;
pub const sz_rfbFramebufferUpdateRequestMsg: u32 = 10;
pub const sz_rfbKeyEventMsg: u32 = 8;
pub const sz_rfbQemuExtendedKeyEventMsg: u32 = 12;
pub const rfbButton1Mask: u32 = 1;
pub const rfbButton2Mask: u32 = 2;
pub const rfbButton3Mask: u32 = 4;
pub const rfbButton4Mask: u32 = 8;
pub const rfbButton5Mask: u32 = 16;
pub const rfbWheelUpMask: u32 = 8;
pub const rfbWheelDownMask: u32 = 16;
pub const sz_rfbPointerEventMsg: u32 = 6;
pub const rfbExtendedClipboard_Text: u32 = 1;
pub const rfbExtendedClipboard_RTF: u32 = 2;
pub const rfbExtendedClipboard_HTML: u32 = 4;
pub const rfbExtendedClipboard_DIB: u32 = 8;
pub const rfbExtendedClipboard_Files: u32 = 16;
pub const rfbExtendedClipboard_Caps: u32 = 16777216;
pub const rfbExtendedClipboard_Request: u32 = 33554432;
pub const rfbExtendedClipboard_Peek: u32 = 67108864;
pub const rfbExtendedClipboard_Notify: u32 = 134217728;
pub const rfbExtendedClipboard_Provide: u32 = 268435456;
pub const sz_rfbClientCutTextMsg: u32 = 8;
pub const sz_rfbSetScaleMsg: u32 = 4;
pub const sz_rfbPalmVNCSetScaleFactorMsg: u32 = 4;
pub const sz_rfbSetServerInputMsg: u32 = 4;
pub const sz_rfbSetSWMsg: u32 = 6;
pub const MAXPWLEN: u32 = 8;
pub const CHALLENGESIZE: u32 = 16;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const UPDATE_BUF_SIZE: u32 = 32768;
pub const ULTRA_MAX_RECT_SIZE: u32 = 32768;
pub const VNC_ENCODE_ZLIB_MIN_COMP_SIZE: u32 = 17;
pub const ZLIB_MAX_RECT_SIZE: u32 = 32768;
pub const TIGHT_DEFAULT_COMPRESSION: u32 = 6;
pub const TURBO_DEFAULT_SUBSAMP: u32 = 0;
pub const XK_VoidSymbol: u32 = 16777215;
pub const XK_BackSpace: u32 = 65288;
pub const XK_Tab: u32 = 65289;
pub const XK_Linefeed: u32 = 65290;
pub const XK_Clear: u32 = 65291;
pub const XK_Return: u32 = 65293;
pub const XK_Pause: u32 = 65299;
pub const XK_Scroll_Lock: u32 = 65300;
pub const XK_Sys_Req: u32 = 65301;
pub const XK_Escape: u32 = 65307;
pub const XK_Delete: u32 = 65535;
pub const XK_Multi_key: u32 = 65312;
pub const XK_SingleCandidate: u32 = 65340;
pub const XK_MultipleCandidate: u32 = 65341;
pub const XK_PreviousCandidate: u32 = 65342;
pub const XK_Kanji: u32 = 65313;
pub const XK_Muhenkan: u32 = 65314;
pub const XK_Henkan_Mode: u32 = 65315;
pub const XK_Henkan: u32 = 65315;
pub const XK_Romaji: u32 = 65316;
pub const XK_Hiragana: u32 = 65317;
pub const XK_Katakana: u32 = 65318;
pub const XK_Hiragana_Katakana: u32 = 65319;
pub const XK_Zenkaku: u32 = 65320;
pub const XK_Hankaku: u32 = 65321;
pub const XK_Zenkaku_Hankaku: u32 = 65322;
pub const XK_Touroku: u32 = 65323;
pub const XK_Massyo: u32 = 65324;
pub const XK_Kana_Lock: u32 = 65325;
pub const XK_Kana_Shift: u32 = 65326;
pub const XK_Eisu_Shift: u32 = 65327;
pub const XK_Eisu_toggle: u32 = 65328;
pub const XK_Zen_Koho: u32 = 65341;
pub const XK_Mae_Koho: u32 = 65342;
pub const XK_Home: u32 = 65360;
pub const XK_Left: u32 = 65361;
pub const XK_Up: u32 = 65362;
pub const XK_Right: u32 = 65363;
pub const XK_Down: u32 = 65364;
pub const XK_Prior: u32 = 65365;
pub const XK_Page_Up: u32 = 65365;
pub const XK_Next: u32 = 65366;
pub const XK_Page_Down: u32 = 65366;
pub const XK_End: u32 = 65367;
pub const XK_Begin: u32 = 65368;
pub const XK_Select: u32 = 65376;
pub const XK_Print: u32 = 65377;
pub const XK_Execute: u32 = 65378;
pub const XK_Insert: u32 = 65379;
pub const XK_Undo: u32 = 65381;
pub const XK_Redo: u32 = 65382;
pub const XK_Menu: u32 = 65383;
pub const XK_Find: u32 = 65384;
pub const XK_Cancel: u32 = 65385;
pub const XK_Help: u32 = 65386;
pub const XK_Break: u32 = 65387;
pub const XK_Mode_switch: u32 = 65406;
pub const XK_script_switch: u32 = 65406;
pub const XK_Num_Lock: u32 = 65407;
pub const XK_KP_Space: u32 = 65408;
pub const XK_KP_Tab: u32 = 65417;
pub const XK_KP_Enter: u32 = 65421;
pub const XK_KP_F1: u32 = 65425;
pub const XK_KP_F2: u32 = 65426;
pub const XK_KP_F3: u32 = 65427;
pub const XK_KP_F4: u32 = 65428;
pub const XK_KP_Home: u32 = 65429;
pub const XK_KP_Left: u32 = 65430;
pub const XK_KP_Up: u32 = 65431;
pub const XK_KP_Right: u32 = 65432;
pub const XK_KP_Down: u32 = 65433;
pub const XK_KP_Prior: u32 = 65434;
pub const XK_KP_Page_Up: u32 = 65434;
pub const XK_KP_Next: u32 = 65435;
pub const XK_KP_Page_Down: u32 = 65435;
pub const XK_KP_End: u32 = 65436;
pub const XK_KP_Begin: u32 = 65437;
pub const XK_KP_Insert: u32 = 65438;
pub const XK_KP_Delete: u32 = 65439;
pub const XK_KP_Equal: u32 = 65469;
pub const XK_KP_Multiply: u32 = 65450;
pub const XK_KP_Add: u32 = 65451;
pub const XK_KP_Separator: u32 = 65452;
pub const XK_KP_Subtract: u32 = 65453;
pub const XK_KP_Decimal: u32 = 65454;
pub const XK_KP_Divide: u32 = 65455;
pub const XK_KP_0: u32 = 65456;
pub const XK_KP_1: u32 = 65457;
pub const XK_KP_2: u32 = 65458;
pub const XK_KP_3: u32 = 65459;
pub const XK_KP_4: u32 = 65460;
pub const XK_KP_5: u32 = 65461;
pub const XK_KP_6: u32 = 65462;
pub const XK_KP_7: u32 = 65463;
pub const XK_KP_8: u32 = 65464;
pub const XK_KP_9: u32 = 65465;
pub const XK_F1: u32 = 65470;
pub const XK_F2: u32 = 65471;
pub const XK_F3: u32 = 65472;
pub const XK_F4: u32 = 65473;
pub const XK_F5: u32 = 65474;
pub const XK_F6: u32 = 65475;
pub const XK_F7: u32 = 65476;
pub const XK_F8: u32 = 65477;
pub const XK_F9: u32 = 65478;
pub const XK_F10: u32 = 65479;
pub const XK_F11: u32 = 65480;
pub const XK_L1: u32 = 65480;
pub const XK_F12: u32 = 65481;
pub const XK_L2: u32 = 65481;
pub const XK_F13: u32 = 65482;
pub const XK_L3: u32 = 65482;
pub const XK_F14: u32 = 65483;
pub const XK_L4: u32 = 65483;
pub const XK_F15: u32 = 65484;
pub const XK_L5: u32 = 65484;
pub const XK_F16: u32 = 65485;
pub const XK_L6: u32 = 65485;
pub const XK_F17: u32 = 65486;
pub const XK_L7: u32 = 65486;
pub const XK_F18: u32 = 65487;
pub const XK_L8: u32 = 65487;
pub const XK_F19: u32 = 65488;
pub const XK_L9: u32 = 65488;
pub const XK_F20: u32 = 65489;
pub const XK_L10: u32 = 65489;
pub const XK_F21: u32 = 65490;
pub const XK_R1: u32 = 65490;
pub const XK_F22: u32 = 65491;
pub const XK_R2: u32 = 65491;
pub const XK_F23: u32 = 65492;
pub const XK_R3: u32 = 65492;
pub const XK_F24: u32 = 65493;
pub const XK_R4: u32 = 65493;
pub const XK_F25: u32 = 65494;
pub const XK_R5: u32 = 65494;
pub const XK_F26: u32 = 65495;
pub const XK_R6: u32 = 65495;
pub const XK_F27: u32 = 65496;
pub const XK_R7: u32 = 65496;
pub const XK_F28: u32 = 65497;
pub const XK_R8: u32 = 65497;
pub const XK_F29: u32 = 65498;
pub const XK_R9: u32 = 65498;
pub const XK_F30: u32 = 65499;
pub const XK_R10: u32 = 65499;
pub const XK_F31: u32 = 65500;
pub const XK_R11: u32 = 65500;
pub const XK_F32: u32 = 65501;
pub const XK_R12: u32 = 65501;
pub const XK_F33: u32 = 65502;
pub const XK_R13: u32 = 65502;
pub const XK_F34: u32 = 65503;
pub const XK_R14: u32 = 65503;
pub const XK_F35: u32 = 65504;
pub const XK_R15: u32 = 65504;
pub const XK_Shift_L: u32 = 65505;
pub const XK_Shift_R: u32 = 65506;
pub const XK_Control_L: u32 = 65507;
pub const XK_Control_R: u32 = 65508;
pub const XK_Caps_Lock: u32 = 65509;
pub const XK_Shift_Lock: u32 = 65510;
pub const XK_Meta_L: u32 = 65511;
pub const XK_Meta_R: u32 = 65512;
pub const XK_Alt_L: u32 = 65513;
pub const XK_Alt_R: u32 = 65514;
pub const XK_Super_L: u32 = 65515;
pub const XK_Super_R: u32 = 65516;
pub const XK_Hyper_L: u32 = 65517;
pub const XK_Hyper_R: u32 = 65518;
pub const XK_ISO_Lock: u32 = 65025;
pub const XK_ISO_Level2_Latch: u32 = 65026;
pub const XK_ISO_Level3_Shift: u32 = 65027;
pub const XK_ISO_Level3_Latch: u32 = 65028;
pub const XK_ISO_Level3_Lock: u32 = 65029;
pub const XK_ISO_Group_Shift: u32 = 65406;
pub const XK_ISO_Group_Latch: u32 = 65030;
pub const XK_ISO_Group_Lock: u32 = 65031;
pub const XK_ISO_Next_Group: u32 = 65032;
pub const XK_ISO_Next_Group_Lock: u32 = 65033;
pub const XK_ISO_Prev_Group: u32 = 65034;
pub const XK_ISO_Prev_Group_Lock: u32 = 65035;
pub const XK_ISO_First_Group: u32 = 65036;
pub const XK_ISO_First_Group_Lock: u32 = 65037;
pub const XK_ISO_Last_Group: u32 = 65038;
pub const XK_ISO_Last_Group_Lock: u32 = 65039;
pub const XK_ISO_Left_Tab: u32 = 65056;
pub const XK_ISO_Move_Line_Up: u32 = 65057;
pub const XK_ISO_Move_Line_Down: u32 = 65058;
pub const XK_ISO_Partial_Line_Up: u32 = 65059;
pub const XK_ISO_Partial_Line_Down: u32 = 65060;
pub const XK_ISO_Partial_Space_Left: u32 = 65061;
pub const XK_ISO_Partial_Space_Right: u32 = 65062;
pub const XK_ISO_Set_Margin_Left: u32 = 65063;
pub const XK_ISO_Set_Margin_Right: u32 = 65064;
pub const XK_ISO_Release_Margin_Left: u32 = 65065;
pub const XK_ISO_Release_Margin_Right: u32 = 65066;
pub const XK_ISO_Release_Both_Margins: u32 = 65067;
pub const XK_ISO_Fast_Cursor_Left: u32 = 65068;
pub const XK_ISO_Fast_Cursor_Right: u32 = 65069;
pub const XK_ISO_Fast_Cursor_Up: u32 = 65070;
pub const XK_ISO_Fast_Cursor_Down: u32 = 65071;
pub const XK_ISO_Continuous_Underline: u32 = 65072;
pub const XK_ISO_Discontinuous_Underline: u32 = 65073;
pub const XK_ISO_Emphasize: u32 = 65074;
pub const XK_ISO_Center_Object: u32 = 65075;
pub const XK_ISO_Enter: u32 = 65076;
pub const XK_dead_grave: u32 = 65104;
pub const XK_dead_acute: u32 = 65105;
pub const XK_dead_circumflex: u32 = 65106;
pub const XK_dead_tilde: u32 = 65107;
pub const XK_dead_macron: u32 = 65108;
pub const XK_dead_breve: u32 = 65109;
pub const XK_dead_abovedot: u32 = 65110;
pub const XK_dead_diaeresis: u32 = 65111;
pub const XK_dead_abovering: u32 = 65112;
pub const XK_dead_doubleacute: u32 = 65113;
pub const XK_dead_caron: u32 = 65114;
pub const XK_dead_cedilla: u32 = 65115;
pub const XK_dead_ogonek: u32 = 65116;
pub const XK_dead_iota: u32 = 65117;
pub const XK_dead_voiced_sound: u32 = 65118;
pub const XK_dead_semivoiced_sound: u32 = 65119;
pub const XK_dead_belowdot: u32 = 65120;
pub const XK_First_Virtual_Screen: u32 = 65232;
pub const XK_Prev_Virtual_Screen: u32 = 65233;
pub const XK_Next_Virtual_Screen: u32 = 65234;
pub const XK_Last_Virtual_Screen: u32 = 65236;
pub const XK_Terminate_Server: u32 = 65237;
pub const XK_AccessX_Enable: u32 = 65136;
pub const XK_AccessX_Feedback_Enable: u32 = 65137;
pub const XK_RepeatKeys_Enable: u32 = 65138;
pub const XK_SlowKeys_Enable: u32 = 65139;
pub const XK_BounceKeys_Enable: u32 = 65140;
pub const XK_StickyKeys_Enable: u32 = 65141;
pub const XK_MouseKeys_Enable: u32 = 65142;
pub const XK_MouseKeys_Accel_Enable: u32 = 65143;
pub const XK_Overlay1_Enable: u32 = 65144;
pub const XK_Overlay2_Enable: u32 = 65145;
pub const XK_AudibleBell_Enable: u32 = 65146;
pub const XK_Pointer_Left: u32 = 65248;
pub const XK_Pointer_Right: u32 = 65249;
pub const XK_Pointer_Up: u32 = 65250;
pub const XK_Pointer_Down: u32 = 65251;
pub const XK_Pointer_UpLeft: u32 = 65252;
pub const XK_Pointer_UpRight: u32 = 65253;
pub const XK_Pointer_DownLeft: u32 = 65254;
pub const XK_Pointer_DownRight: u32 = 65255;
pub const XK_Pointer_Button_Dflt: u32 = 65256;
pub const XK_Pointer_Button1: u32 = 65257;
pub const XK_Pointer_Button2: u32 = 65258;
pub const XK_Pointer_Button3: u32 = 65259;
pub const XK_Pointer_Button4: u32 = 65260;
pub const XK_Pointer_Button5: u32 = 65261;
pub const XK_Pointer_DblClick_Dflt: u32 = 65262;
pub const XK_Pointer_DblClick1: u32 = 65263;
pub const XK_Pointer_DblClick2: u32 = 65264;
pub const XK_Pointer_DblClick3: u32 = 65265;
pub const XK_Pointer_DblClick4: u32 = 65266;
pub const XK_Pointer_DblClick5: u32 = 65267;
pub const XK_Pointer_Drag_Dflt: u32 = 65268;
pub const XK_Pointer_Drag1: u32 = 65269;
pub const XK_Pointer_Drag2: u32 = 65270;
pub const XK_Pointer_Drag3: u32 = 65271;
pub const XK_Pointer_Drag4: u32 = 65272;
pub const XK_Pointer_Drag5: u32 = 65277;
pub const XK_Pointer_EnableKeys: u32 = 65273;
pub const XK_Pointer_Accelerate: u32 = 65274;
pub const XK_Pointer_DfltBtnNext: u32 = 65275;
pub const XK_Pointer_DfltBtnPrev: u32 = 65276;
pub const XK_space: u32 = 32;
pub const XK_exclam: u32 = 33;
pub const XK_quotedbl: u32 = 34;
pub const XK_numbersign: u32 = 35;
pub const XK_dollar: u32 = 36;
pub const XK_percent: u32 = 37;
pub const XK_ampersand: u32 = 38;
pub const XK_apostrophe: u32 = 39;
pub const XK_quoteright: u32 = 39;
pub const XK_parenleft: u32 = 40;
pub const XK_parenright: u32 = 41;
pub const XK_asterisk: u32 = 42;
pub const XK_plus: u32 = 43;
pub const XK_comma: u32 = 44;
pub const XK_minus: u32 = 45;
pub const XK_period: u32 = 46;
pub const XK_slash: u32 = 47;
pub const XK_0: u32 = 48;
pub const XK_1: u32 = 49;
pub const XK_2: u32 = 50;
pub const XK_3: u32 = 51;
pub const XK_4: u32 = 52;
pub const XK_5: u32 = 53;
pub const XK_6: u32 = 54;
pub const XK_7: u32 = 55;
pub const XK_8: u32 = 56;
pub const XK_9: u32 = 57;
pub const XK_colon: u32 = 58;
pub const XK_semicolon: u32 = 59;
pub const XK_less: u32 = 60;
pub const XK_equal: u32 = 61;
pub const XK_greater: u32 = 62;
pub const XK_question: u32 = 63;
pub const XK_at: u32 = 64;
pub const XK_A: u32 = 65;
pub const XK_B: u32 = 66;
pub const XK_C: u32 = 67;
pub const XK_D: u32 = 68;
pub const XK_E: u32 = 69;
pub const XK_F: u32 = 70;
pub const XK_G: u32 = 71;
pub const XK_H: u32 = 72;
pub const XK_I: u32 = 73;
pub const XK_J: u32 = 74;
pub const XK_K: u32 = 75;
pub const XK_L: u32 = 76;
pub const XK_M: u32 = 77;
pub const XK_N: u32 = 78;
pub const XK_O: u32 = 79;
pub const XK_P: u32 = 80;
pub const XK_Q: u32 = 81;
pub const XK_R: u32 = 82;
pub const XK_S: u32 = 83;
pub const XK_T: u32 = 84;
pub const XK_U: u32 = 85;
pub const XK_V: u32 = 86;
pub const XK_W: u32 = 87;
pub const XK_X: u32 = 88;
pub const XK_Y: u32 = 89;
pub const XK_Z: u32 = 90;
pub const XK_bracketleft: u32 = 91;
pub const XK_backslash: u32 = 92;
pub const XK_bracketright: u32 = 93;
pub const XK_asciicircum: u32 = 94;
pub const XK_underscore: u32 = 95;
pub const XK_grave: u32 = 96;
pub const XK_quoteleft: u32 = 96;
pub const XK_a: u32 = 97;
pub const XK_b: u32 = 98;
pub const XK_c: u32 = 99;
pub const XK_d: u32 = 100;
pub const XK_e: u32 = 101;
pub const XK_f: u32 = 102;
pub const XK_g: u32 = 103;
pub const XK_h: u32 = 104;
pub const XK_i: u32 = 105;
pub const XK_j: u32 = 106;
pub const XK_k: u32 = 107;
pub const XK_l: u32 = 108;
pub const XK_m: u32 = 109;
pub const XK_n: u32 = 110;
pub const XK_o: u32 = 111;
pub const XK_p: u32 = 112;
pub const XK_q: u32 = 113;
pub const XK_r: u32 = 114;
pub const XK_s: u32 = 115;
pub const XK_t: u32 = 116;
pub const XK_u: u32 = 117;
pub const XK_v: u32 = 118;
pub const XK_w: u32 = 119;
pub const XK_x: u32 = 120;
pub const XK_y: u32 = 121;
pub const XK_z: u32 = 122;
pub const XK_braceleft: u32 = 123;
pub const XK_bar: u32 = 124;
pub const XK_braceright: u32 = 125;
pub const XK_asciitilde: u32 = 126;
pub const XK_nobreakspace: u32 = 160;
pub const XK_exclamdown: u32 = 161;
pub const XK_cent: u32 = 162;
pub const XK_sterling: u32 = 163;
pub const XK_currency: u32 = 164;
pub const XK_yen: u32 = 165;
pub const XK_brokenbar: u32 = 166;
pub const XK_section: u32 = 167;
pub const XK_diaeresis: u32 = 168;
pub const XK_copyright: u32 = 169;
pub const XK_ordfeminine: u32 = 170;
pub const XK_guillemotleft: u32 = 171;
pub const XK_notsign: u32 = 172;
pub const XK_hyphen: u32 = 173;
pub const XK_registered: u32 = 174;
pub const XK_macron: u32 = 175;
pub const XK_degree: u32 = 176;
pub const XK_plusminus: u32 = 177;
pub const XK_twosuperior: u32 = 178;
pub const XK_threesuperior: u32 = 179;
pub const XK_acute: u32 = 180;
pub const XK_mu: u32 = 181;
pub const XK_paragraph: u32 = 182;
pub const XK_periodcentered: u32 = 183;
pub const XK_cedilla: u32 = 184;
pub const XK_onesuperior: u32 = 185;
pub const XK_masculine: u32 = 186;
pub const XK_guillemotright: u32 = 187;
pub const XK_onequarter: u32 = 188;
pub const XK_onehalf: u32 = 189;
pub const XK_threequarters: u32 = 190;
pub const XK_questiondown: u32 = 191;
pub const XK_Agrave: u32 = 192;
pub const XK_Aacute: u32 = 193;
pub const XK_Acircumflex: u32 = 194;
pub const XK_Atilde: u32 = 195;
pub const XK_Adiaeresis: u32 = 196;
pub const XK_Aring: u32 = 197;
pub const XK_AE: u32 = 198;
pub const XK_Ccedilla: u32 = 199;
pub const XK_Egrave: u32 = 200;
pub const XK_Eacute: u32 = 201;
pub const XK_Ecircumflex: u32 = 202;
pub const XK_Ediaeresis: u32 = 203;
pub const XK_Igrave: u32 = 204;
pub const XK_Iacute: u32 = 205;
pub const XK_Icircumflex: u32 = 206;
pub const XK_Idiaeresis: u32 = 207;
pub const XK_ETH: u32 = 208;
pub const XK_Eth: u32 = 208;
pub const XK_Ntilde: u32 = 209;
pub const XK_Ograve: u32 = 210;
pub const XK_Oacute: u32 = 211;
pub const XK_Ocircumflex: u32 = 212;
pub const XK_Otilde: u32 = 213;
pub const XK_Odiaeresis: u32 = 214;
pub const XK_multiply: u32 = 215;
pub const XK_Ooblique: u32 = 216;
pub const XK_Ugrave: u32 = 217;
pub const XK_Uacute: u32 = 218;
pub const XK_Ucircumflex: u32 = 219;
pub const XK_Udiaeresis: u32 = 220;
pub const XK_Yacute: u32 = 221;
pub const XK_THORN: u32 = 222;
pub const XK_Thorn: u32 = 222;
pub const XK_ssharp: u32 = 223;
pub const XK_agrave: u32 = 224;
pub const XK_aacute: u32 = 225;
pub const XK_acircumflex: u32 = 226;
pub const XK_atilde: u32 = 227;
pub const XK_adiaeresis: u32 = 228;
pub const XK_aring: u32 = 229;
pub const XK_ae: u32 = 230;
pub const XK_ccedilla: u32 = 231;
pub const XK_egrave: u32 = 232;
pub const XK_eacute: u32 = 233;
pub const XK_ecircumflex: u32 = 234;
pub const XK_ediaeresis: u32 = 235;
pub const XK_igrave: u32 = 236;
pub const XK_iacute: u32 = 237;
pub const XK_icircumflex: u32 = 238;
pub const XK_idiaeresis: u32 = 239;
pub const XK_eth: u32 = 240;
pub const XK_ntilde: u32 = 241;
pub const XK_ograve: u32 = 242;
pub const XK_oacute: u32 = 243;
pub const XK_ocircumflex: u32 = 244;
pub const XK_otilde: u32 = 245;
pub const XK_odiaeresis: u32 = 246;
pub const XK_division: u32 = 247;
pub const XK_oslash: u32 = 248;
pub const XK_ugrave: u32 = 249;
pub const XK_uacute: u32 = 250;
pub const XK_ucircumflex: u32 = 251;
pub const XK_udiaeresis: u32 = 252;
pub const XK_yacute: u32 = 253;
pub const XK_thorn: u32 = 254;
pub const XK_ydiaeresis: u32 = 255;
pub const XK_Aogonek: u32 = 417;
pub const XK_breve: u32 = 418;
pub const XK_Lstroke: u32 = 419;
pub const XK_Lcaron: u32 = 421;
pub const XK_Sacute: u32 = 422;
pub const XK_Scaron: u32 = 425;
pub const XK_Scedilla: u32 = 426;
pub const XK_Tcaron: u32 = 427;
pub const XK_Zacute: u32 = 428;
pub const XK_Zcaron: u32 = 430;
pub const XK_Zabovedot: u32 = 431;
pub const XK_aogonek: u32 = 433;
pub const XK_ogonek: u32 = 434;
pub const XK_lstroke: u32 = 435;
pub const XK_lcaron: u32 = 437;
pub const XK_sacute: u32 = 438;
pub const XK_caron: u32 = 439;
pub const XK_scaron: u32 = 441;
pub const XK_scedilla: u32 = 442;
pub const XK_tcaron: u32 = 443;
pub const XK_zacute: u32 = 444;
pub const XK_doubleacute: u32 = 445;
pub const XK_zcaron: u32 = 446;
pub const XK_zabovedot: u32 = 447;
pub const XK_Racute: u32 = 448;
pub const XK_Abreve: u32 = 451;
pub const XK_Lacute: u32 = 453;
pub const XK_Cacute: u32 = 454;
pub const XK_Ccaron: u32 = 456;
pub const XK_Eogonek: u32 = 458;
pub const XK_Ecaron: u32 = 460;
pub const XK_Dcaron: u32 = 463;
pub const XK_Dstroke: u32 = 464;
pub const XK_Nacute: u32 = 465;
pub const XK_Ncaron: u32 = 466;
pub const XK_Odoubleacute: u32 = 469;
pub const XK_Rcaron: u32 = 472;
pub const XK_Uring: u32 = 473;
pub const XK_Udoubleacute: u32 = 475;
pub const XK_Tcedilla: u32 = 478;
pub const XK_racute: u32 = 480;
pub const XK_abreve: u32 = 483;
pub const XK_lacute: u32 = 485;
pub const XK_cacute: u32 = 486;
pub const XK_ccaron: u32 = 488;
pub const XK_eogonek: u32 = 490;
pub const XK_ecaron: u32 = 492;
pub const XK_dcaron: u32 = 495;
pub const XK_dstroke: u32 = 496;
pub const XK_nacute: u32 = 497;
pub const XK_ncaron: u32 = 498;
pub const XK_odoubleacute: u32 = 501;
pub const XK_udoubleacute: u32 = 507;
pub const XK_rcaron: u32 = 504;
pub const XK_uring: u32 = 505;
pub const XK_tcedilla: u32 = 510;
pub const XK_abovedot: u32 = 511;
pub const XK_Hstroke: u32 = 673;
pub const XK_Hcircumflex: u32 = 678;
pub const XK_Iabovedot: u32 = 681;
pub const XK_Gbreve: u32 = 683;
pub const XK_Jcircumflex: u32 = 684;
pub const XK_hstroke: u32 = 689;
pub const XK_hcircumflex: u32 = 694;
pub const XK_idotless: u32 = 697;
pub const XK_gbreve: u32 = 699;
pub const XK_jcircumflex: u32 = 700;
pub const XK_Cabovedot: u32 = 709;
pub const XK_Ccircumflex: u32 = 710;
pub const XK_Gabovedot: u32 = 725;
pub const XK_Gcircumflex: u32 = 728;
pub const XK_Ubreve: u32 = 733;
pub const XK_Scircumflex: u32 = 734;
pub const XK_cabovedot: u32 = 741;
pub const XK_ccircumflex: u32 = 742;
pub const XK_gabovedot: u32 = 757;
pub const XK_gcircumflex: u32 = 760;
pub const XK_ubreve: u32 = 765;
pub const XK_scircumflex: u32 = 766;
pub const XK_kra: u32 = 930;
pub const XK_kappa: u32 = 930;
pub const XK_Rcedilla: u32 = 931;
pub const XK_Itilde: u32 = 933;
pub const XK_Lcedilla: u32 = 934;
pub const XK_Emacron: u32 = 938;
pub const XK_Gcedilla: u32 = 939;
pub const XK_Tslash: u32 = 940;
pub const XK_rcedilla: u32 = 947;
pub const XK_itilde: u32 = 949;
pub const XK_lcedilla: u32 = 950;
pub const XK_emacron: u32 = 954;
pub const XK_gcedilla: u32 = 955;
pub const XK_tslash: u32 = 956;
pub const XK_ENG: u32 = 957;
pub const XK_eng: u32 = 959;
pub const XK_Amacron: u32 = 960;
pub const XK_Iogonek: u32 = 967;
pub const XK_Eabovedot: u32 = 972;
pub const XK_Imacron: u32 = 975;
pub const XK_Ncedilla: u32 = 977;
pub const XK_Omacron: u32 = 978;
pub const XK_Kcedilla: u32 = 979;
pub const XK_Uogonek: u32 = 985;
pub const XK_Utilde: u32 = 989;
pub const XK_Umacron: u32 = 990;
pub const XK_amacron: u32 = 992;
pub const XK_iogonek: u32 = 999;
pub const XK_eabovedot: u32 = 1004;
pub const XK_imacron: u32 = 1007;
pub const XK_ncedilla: u32 = 1009;
pub const XK_omacron: u32 = 1010;
pub const XK_kcedilla: u32 = 1011;
pub const XK_uogonek: u32 = 1017;
pub const XK_utilde: u32 = 1021;
pub const XK_umacron: u32 = 1022;
pub const XK_Greek_ALPHAaccent: u32 = 1953;
pub const XK_Greek_EPSILONaccent: u32 = 1954;
pub const XK_Greek_ETAaccent: u32 = 1955;
pub const XK_Greek_IOTAaccent: u32 = 1956;
pub const XK_Greek_IOTAdieresis: u32 = 1957;
pub const XK_Greek_OMICRONaccent: u32 = 1959;
pub const XK_Greek_UPSILONaccent: u32 = 1960;
pub const XK_Greek_UPSILONdieresis: u32 = 1961;
pub const XK_Greek_OMEGAaccent: u32 = 1963;
pub const XK_Greek_accentdieresis: u32 = 1966;
pub const XK_Greek_horizbar: u32 = 1967;
pub const XK_Greek_alphaaccent: u32 = 1969;
pub const XK_Greek_epsilonaccent: u32 = 1970;
pub const XK_Greek_etaaccent: u32 = 1971;
pub const XK_Greek_iotaaccent: u32 = 1972;
pub const XK_Greek_iotadieresis: u32 = 1973;
pub const XK_Greek_iotaaccentdieresis: u32 = 1974;
pub const XK_Greek_omicronaccent: u32 = 1975;
pub const XK_Greek_upsilonaccent: u32 = 1976;
pub const XK_Greek_upsilondieresis: u32 = 1977;
pub const XK_Greek_upsilonaccentdieresis: u32 = 1978;
pub const XK_Greek_omegaaccent: u32 = 1979;
pub const XK_Greek_ALPHA: u32 = 1985;
pub const XK_Greek_BETA: u32 = 1986;
pub const XK_Greek_GAMMA: u32 = 1987;
pub const XK_Greek_DELTA: u32 = 1988;
pub const XK_Greek_EPSILON: u32 = 1989;
pub const XK_Greek_ZETA: u32 = 1990;
pub const XK_Greek_ETA: u32 = 1991;
pub const XK_Greek_THETA: u32 = 1992;
pub const XK_Greek_IOTA: u32 = 1993;
pub const XK_Greek_KAPPA: u32 = 1994;
pub const XK_Greek_LAMDA: u32 = 1995;
pub const XK_Greek_LAMBDA: u32 = 1995;
pub const XK_Greek_MU: u32 = 1996;
pub const XK_Greek_NU: u32 = 1997;
pub const XK_Greek_XI: u32 = 1998;
pub const XK_Greek_OMICRON: u32 = 1999;
pub const XK_Greek_PI: u32 = 2000;
pub const XK_Greek_RHO: u32 = 2001;
pub const XK_Greek_SIGMA: u32 = 2002;
pub const XK_Greek_TAU: u32 = 2004;
pub const XK_Greek_UPSILON: u32 = 2005;
pub const XK_Greek_PHI: u32 = 2006;
pub const XK_Greek_CHI: u32 = 2007;
pub const XK_Greek_PSI: u32 = 2008;
pub const XK_Greek_OMEGA: u32 = 2009;
pub const XK_Greek_alpha: u32 = 2017;
pub const XK_Greek_beta: u32 = 2018;
pub const XK_Greek_gamma: u32 = 2019;
pub const XK_Greek_delta: u32 = 2020;
pub const XK_Greek_epsilon: u32 = 2021;
pub const XK_Greek_zeta: u32 = 2022;
pub const XK_Greek_eta: u32 = 2023;
pub const XK_Greek_theta: u32 = 2024;
pub const XK_Greek_iota: u32 = 2025;
pub const XK_Greek_kappa: u32 = 2026;
pub const XK_Greek_lamda: u32 = 2027;
pub const XK_Greek_lambda: u32 = 2027;
pub const XK_Greek_mu: u32 = 2028;
pub const XK_Greek_nu: u32 = 2029;
pub const XK_Greek_xi: u32 = 2030;
pub const XK_Greek_omicron: u32 = 2031;
pub const XK_Greek_pi: u32 = 2032;
pub const XK_Greek_rho: u32 = 2033;
pub const XK_Greek_sigma: u32 = 2034;
pub const XK_Greek_finalsmallsigma: u32 = 2035;
pub const XK_Greek_tau: u32 = 2036;
pub const XK_Greek_upsilon: u32 = 2037;
pub const XK_Greek_phi: u32 = 2038;
pub const XK_Greek_chi: u32 = 2039;
pub const XK_Greek_psi: u32 = 2040;
pub const XK_Greek_omega: u32 = 2041;
pub const XK_Greek_switch: u32 = 65406;
pub const XK_EuroSign: u32 = 8364;
pub const FLASH_PORT_OFFSET: u32 = 5400;
pub const LISTEN_PORT_OFFSET: u32 = 5500;
pub const TUNNEL_PORT_OFFSET: u32 = 5500;
pub const SERVER_PORT_OFFSET: u32 = 5900;
pub const DEFAULT_CONNECT_TIMEOUT: u32 = 60;
pub const DEFAULT_READ_TIMEOUT: u32 = 0;
pub const DEFAULT_SSH_CMD: &[u8; 13] = b"/usr/bin/ssh\0";
pub const DEFAULT_TUNNEL_CMD: &[u8; 47] = b"/usr/bin/ssh -f -L %L:localhost:%R %H sleep 20\0";
pub const DEFAULT_VIA_CMD: &[u8; 40] = b"/usr/bin/ssh -f -L %L:%H:%R %G sleep 20\0";
pub const rfbCredentialTypeX509: u32 = 1;
pub const rfbCredentialTypeUser: u32 = 2;
pub const rfbX509CrlVerifyNone: u32 = 0;
pub const rfbX509CrlVerifyClient: u32 = 1;
pub const rfbX509CrlVerifyAll: u32 = 2;
pub const RFB_BUFFER_SIZE: u32 = 307200;
pub const RFB_BUF_SIZE: u32 = 8192;
pub const ZLIB_BUFFER_SIZE: u32 = 30000;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::core::ffi::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::core::ffi::c_uint,
    pub __wchb: [::core::ffi::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::core::mem::MaybeUninit<__mbstate_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::core::mem::MaybeUninit<_G_fpos_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::core::mem::MaybeUninit<_G_fpos64_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::core::ffi::c_int,
    pub _IO_read_ptr: *mut ::core::ffi::c_char,
    pub _IO_read_end: *mut ::core::ffi::c_char,
    pub _IO_read_base: *mut ::core::ffi::c_char,
    pub _IO_write_base: *mut ::core::ffi::c_char,
    pub _IO_write_ptr: *mut ::core::ffi::c_char,
    pub _IO_write_end: *mut ::core::ffi::c_char,
    pub _IO_buf_base: *mut ::core::ffi::c_char,
    pub _IO_buf_end: *mut ::core::ffi::c_char,
    pub _IO_save_base: *mut ::core::ffi::c_char,
    pub _IO_backup_base: *mut ::core::ffi::c_char,
    pub _IO_save_end: *mut ::core::ffi::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::core::ffi::c_int,
    pub _flags2: ::core::ffi::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::core::ffi::c_ushort,
    pub _vtable_offset: ::core::ffi::c_schar,
    pub _shortbuf: [::core::ffi::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::core::ffi::c_void,
    pub __pad5: usize,
    pub _mode: ::core::ffi::c_int,
    pub _unused2: [::core::ffi::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::core::mem::MaybeUninit<_IO_FILE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::core::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::core::ffi::c_void,
        __buf: *mut ::core::ffi::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::core::ffi::c_void,
        __buf: *const ::core::ffi::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::core::ffi::c_void,
        __pos: *mut __off64_t,
        __w: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub type cookie_close_function_t = ::core::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::core::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::core::ffi::c_char,
        __new: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::core::ffi::c_int,
        __old: *const ::core::ffi::c_char,
        __newfd: ::core::ffi::c_int,
        __new: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::core::ffi::c_char,
        __pfx: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::core::ffi::c_char,
        __modes: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::core::ffi::c_char,
        __modes: *const ::core::ffi::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::core::ffi::c_int, __modes: *const ::core::ffi::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::core::ffi::c_void,
        __modes: *const ::core::ffi::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::core::ffi::c_void,
        __len: usize,
        __modes: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::core::ffi::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::core::ffi::c_char,
        __modes: ::core::ffi::c_int,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::core::ffi::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::core::ffi::c_char,
        __maxlen: ::core::ffi::c_ulong,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::core::ffi::c_char,
        __maxlen: ::core::ffi::c_ulong,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::core::ffi::c_char,
        __f: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::core::ffi::c_int,
        __fmt: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::core::ffi::c_int,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::core::ffi::c_char,
        __format: *const ::core::ffi::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putw(__w: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::core::ffi::c_char,
        __n: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::core::ffi::c_char,
        __n: *mut usize,
        __delimiter: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::core::ffi::c_char,
        __n: *mut usize,
        __delimiter: ::core::ffi::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::core::ffi::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::core::ffi::c_char, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::core::ffi::c_int, __stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
        __n: ::core::ffi::c_ulong,
        __stream: *mut FILE,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
        __n: ::core::ffi::c_ulong,
        __s: *mut FILE,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::core::ffi::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::core::ffi::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::core::ffi::c_long,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::core::ffi::c_char,
        __modes: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::core::ffi::c_int,
    pub rem: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::core::mem::MaybeUninit<div_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<ldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::core::ffi::c_longlong,
    pub rem: ::core::ffi::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<lldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::core::ffi::c_ulong;
pub type ushort = ::core::ffi::c_ushort;
pub type uint = ::core::ffi::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::core::ffi::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::core::mem::MaybeUninit<__sigset_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::core::mem::MaybeUninit<timeval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::core::mem::MaybeUninit<fd_set> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::core::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::core::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::core::ffi::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::core::ffi::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::core::ffi::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::core::ffi::c_uint,
    pub __high: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::core::mem::MaybeUninit<__atomic_wide_counter> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::core::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_internal_list> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_internal_slist> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::core::ffi::c_int,
    pub __count: ::core::ffi::c_uint,
    pub __owner: ::core::ffi::c_int,
    pub __nusers: ::core::ffi::c_uint,
    pub __kind: ::core::ffi::c_int,
    pub __spins: ::core::ffi::c_short,
    pub __elision: ::core::ffi::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_mutex_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::core::ffi::c_uint,
    pub __writers: ::core::ffi::c_uint,
    pub __wrphase_futex: ::core::ffi::c_uint,
    pub __writers_futex: ::core::ffi::c_uint,
    pub __pad3: ::core::ffi::c_uint,
    pub __pad4: ::core::ffi::c_uint,
    pub __cur_writer: ::core::ffi::c_int,
    pub __shared: ::core::ffi::c_int,
    pub __rwelision: ::core::ffi::c_schar,
    pub __pad1: [::core::ffi::c_uchar; 7usize],
    pub __pad2: ::core::ffi::c_ulong,
    pub __flags: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::core::ffi::c_uint; 2usize],
    pub __g_size: [::core::ffi::c_uint; 2usize],
    pub __g1_orig_size: ::core::ffi::c_uint,
    pub __wrefs: ::core::ffi::c_uint,
    pub __g_signals: [::core::ffi::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_cond_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::core::ffi::c_uint;
pub type __thrd_t = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::core::mem::MaybeUninit<__once_flag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::core::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::core::ffi::c_char; 4usize],
    pub __align: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_mutexattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::core::ffi::c_char; 4usize],
    pub __align: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_condattr_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::core::ffi::c_uint;
pub type pthread_once_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::core::ffi::c_char; 56usize],
    pub __align: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_attr_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::core::ffi::c_char; 40usize],
    pub __align: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_mutex_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::core::ffi::c_char; 48usize],
    pub __align: ::core::ffi::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_cond_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::core::ffi::c_char; 56usize],
    pub __align: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_rwlock_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::core::ffi::c_char; 8usize],
    pub __align: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_rwlockattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::core::ffi::c_char; 32usize],
    pub __align: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_barrier_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::core::ffi::c_char; 4usize],
    pub __align: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_barrierattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::core::ffi::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::core::ffi::c_uint,
        __statebuf: *mut ::core::ffi::c_char,
        __statelen: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::core::ffi::c_int,
    pub rand_deg: ::core::ffi::c_int,
    pub rand_sep: ::core::ffi::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::core::mem::MaybeUninit<random_data> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::core::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::core::ffi::c_uint, __buf: *mut random_data) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::core::ffi::c_uint,
        __statebuf: *mut ::core::ffi::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::core::ffi::c_char,
        __buf: *mut random_data,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rand() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn srand(__seed: ::core::ffi::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn mrand48() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::core::ffi::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::core::ffi::c_ushort; 3usize],
    pub __old_x: [::core::ffi::c_ushort; 3usize],
    pub __c: ::core::ffi::c_ushort,
    pub __init: ::core::ffi::c_ushort,
    pub __a: ::core::ffi::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::core::mem::MaybeUninit<drand48_data> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::core::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::core::ffi::c_long,
        __buffer: *mut drand48_data,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::core::ffi::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn alloca(__size: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::core::ffi::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(__status: ::core::ffi::c_int, __arg: *mut ::core::ffi::c_void),
        >,
        __arg: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::core::ffi::c_char,
        __value: *const ::core::ffi::c_char,
        __replace: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearenv() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::core::ffi::c_char,
        __suffixlen: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::core::ffi::c_char,
        __resolved: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::core::ffi::c_void,
        __base: *const ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::core::ffi::c_int, __denom: ::core::ffi::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::core::ffi::c_long, __denom: ::core::ffi::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::core::ffi::c_longlong, __denom: ::core::ffi::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::core::ffi::c_int,
        __decpt: *mut ::core::ffi::c_int,
        __sign: *mut ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::core::ffi::c_char,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::core::ffi::c_char, __wchar: wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::core::ffi::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::core::ffi::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::core::ffi::c_char,
        __tokens: *const *mut ::core::ffi::c_char,
        __valuep: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::core::ffi::c_ushort,
    pub __ctype_tolower: *const ::core::ffi::c_int,
    pub __ctype_toupper: *const ::core::ffi::c_int,
    pub __names: [*const ::core::ffi::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::core::mem::MaybeUninit<__locale_struct> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::core::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __l: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::core::ffi::c_char,
        __reject: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
        __save_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
        __save_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::core::ffi::c_void,
        __haystacklen: usize,
        __needle: *const ::core::ffi::c_void,
        __needlelen: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::core::ffi::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::core::ffi::c_int, __l: locale_t) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::core::ffi::c_void,
        __dest: *mut ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::core::ffi::c_void, __n: ::core::ffi::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ffs(__i: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __loc: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::core::ffi::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::core::mem::MaybeUninit<max_align_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type z_size_t = usize;
pub type Byte = ::core::ffi::c_uchar;
pub type uInt = ::core::ffi::c_uint;
pub type uLong = ::core::ffi::c_ulong;
pub type Bytef = Byte;
pub type charf = ::core::ffi::c_char;
pub type intf = ::core::ffi::c_int;
pub type uIntf = uInt;
pub type uLongf = uLong;
pub type voidpc = *const ::core::ffi::c_void;
pub type voidpf = *mut ::core::ffi::c_void;
pub type voidp = *mut ::core::ffi::c_void;
pub type z_crc_t = ::core::ffi::c_uint;
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::core::ffi::c_char,
        __type: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __type: ::core::ffi::c_int,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::core::ffi::c_int,
        __offset: __off_t,
        __whence: ::core::ffi::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::core::ffi::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(__fd: ::core::ffi::c_int, __buf: *const ::core::ffi::c_void, __n: usize) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pause() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::core::ffi::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn dup(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::core::ffi::c_int, __fd2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::core::ffi::c_int,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::core::ffi::c_char,
        __arg: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn nice(__inc: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _exit(__status: ::core::ffi::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::core::ffi::c_char,
        __name: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn fpathconf(__fd: ::core::ffi::c_int, __name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::core::ffi::c_int, __list: *mut __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::core::ffi::c_char,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::core::ffi::c_int,
        __from: *const ::core::ffi::c_char,
        __tofd: ::core::ffi::c_int,
        __to: *const ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::core::ffi::c_char,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::core::ffi::c_char,
        __tofd: ::core::ffi::c_int,
        __to: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::core::ffi::c_int,
        __name: *const ::core::ffi::c_char,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pgrp_id: __pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getlogin_r(__name: *mut ::core::ffi::c_char, __name_len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::core::ffi::c_char;
}
extern "C" {
    pub static mut optind: ::core::ffi::c_int;
}
extern "C" {
    pub static mut opterr: ::core::ffi::c_int;
}
extern "C" {
    pub static mut optopt: ::core::ffi::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::core::ffi::c_int,
        ___argv: *const *mut ::core::ffi::c_char,
        __shortopts: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sethostname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdomainname(__name: *mut ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setdomainname(__name: *const ::core::ffi::c_char, __len: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vhangup() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::core::ffi::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::core::ffi::c_int,
        __noclose: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gethostid() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn truncate(__file: *const ::core::ffi::c_char, __length: __off_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::core::ffi::c_int, __length: __off_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::core::ffi::c_int,
        __cmd: ::core::ffi::c_int,
        __len: __off_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::core::ffi::c_char,
        __salt: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getentropy(__buffer: *mut ::core::ffi::c_void, __length: usize) -> ::core::ffi::c_int;
}
pub type alloc_func =
    ::core::option::Option<unsafe extern "C" fn(opaque: voidpf, items: uInt, size: uInt) -> voidpf>;
pub type free_func = ::core::option::Option<unsafe extern "C" fn(opaque: voidpf, address: voidpf)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_stream_s {
    pub next_in: *mut Bytef,
    pub avail_in: uInt,
    pub total_in: uLong,
    pub next_out: *mut Bytef,
    pub avail_out: uInt,
    pub total_out: uLong,
    pub msg: *mut ::core::ffi::c_char,
    pub state: *mut internal_state,
    pub zalloc: alloc_func,
    pub zfree: free_func,
    pub opaque: voidpf,
    pub data_type: ::core::ffi::c_int,
    pub adler: uLong,
    pub reserved: uLong,
}
#[test]
fn bindgen_test_layout_z_stream_s() {
    const UNINIT: ::core::mem::MaybeUninit<z_stream_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_stream_s>(),
        112usize,
        concat!("Size of: ", stringify!(z_stream_s))
    );
    assert_eq!(
        ::core::mem::align_of::<z_stream_s>(),
        8usize,
        concat!("Alignment of ", stringify!(z_stream_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(next_in)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).avail_in) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(avail_in)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total_in) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(total_in)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(next_out)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).avail_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(avail_out)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(total_out)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zalloc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(zalloc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zfree) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(zfree)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).adler) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(adler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(reserved)
        )
    );
}
pub type z_stream = z_stream_s;
pub type z_streamp = *mut z_stream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gz_header_s {
    pub text: ::core::ffi::c_int,
    pub time: uLong,
    pub xflags: ::core::ffi::c_int,
    pub os: ::core::ffi::c_int,
    pub extra: *mut Bytef,
    pub extra_len: uInt,
    pub extra_max: uInt,
    pub name: *mut Bytef,
    pub name_max: uInt,
    pub comment: *mut Bytef,
    pub comm_max: uInt,
    pub hcrc: ::core::ffi::c_int,
    pub done: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_gz_header_s() {
    const UNINIT: ::core::mem::MaybeUninit<gz_header_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<gz_header_s>(),
        80usize,
        concat!("Size of: ", stringify!(gz_header_s))
    );
    assert_eq!(
        ::core::mem::align_of::<gz_header_s>(),
        8usize,
        concat!("Alignment of ", stringify!(gz_header_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xflags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(xflags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).os) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra_len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(extra_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra_max) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(extra_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_max) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(name_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).comm_max) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(comm_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hcrc) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(hcrc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(done)
        )
    );
}
pub type gz_header = gz_header_s;
pub type gz_headerp = *mut gz_header;
extern "C" {
    pub fn zlibVersion() -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn deflate(strm: z_streamp, flush: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateEnd(strm: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflate(strm: z_streamp, flush: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateEnd(strm: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateSetDictionary(
        strm: z_streamp,
        dictionary: *const Bytef,
        dictLength: uInt,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateGetDictionary(
        strm: z_streamp,
        dictionary: *mut Bytef,
        dictLength: *mut uInt,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateCopy(dest: z_streamp, source: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateReset(strm: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateParams(
        strm: z_streamp,
        level: ::core::ffi::c_int,
        strategy: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateTune(
        strm: z_streamp,
        good_length: ::core::ffi::c_int,
        max_lazy: ::core::ffi::c_int,
        nice_length: ::core::ffi::c_int,
        max_chain: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateBound(strm: z_streamp, sourceLen: uLong) -> uLong;
}
extern "C" {
    pub fn deflatePending(
        strm: z_streamp,
        pending: *mut ::core::ffi::c_uint,
        bits: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflatePrime(
        strm: z_streamp,
        bits: ::core::ffi::c_int,
        value: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateSetHeader(strm: z_streamp, head: gz_headerp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateSetDictionary(
        strm: z_streamp,
        dictionary: *const Bytef,
        dictLength: uInt,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateGetDictionary(
        strm: z_streamp,
        dictionary: *mut Bytef,
        dictLength: *mut uInt,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateSync(strm: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateCopy(dest: z_streamp, source: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateReset(strm: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateReset2(strm: z_streamp, windowBits: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflatePrime(
        strm: z_streamp,
        bits: ::core::ffi::c_int,
        value: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateMark(strm: z_streamp) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn inflateGetHeader(strm: z_streamp, head: gz_headerp) -> ::core::ffi::c_int;
}
pub type in_func = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut *mut ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_uint,
>;
pub type out_func = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_uchar,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int,
>;
extern "C" {
    pub fn inflateBack(
        strm: z_streamp,
        in_: in_func,
        in_desc: *mut ::core::ffi::c_void,
        out: out_func,
        out_desc: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateBackEnd(strm: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn zlibCompileFlags() -> uLong;
}
extern "C" {
    pub fn compress(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn compress2(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
        level: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn compressBound(sourceLen: uLong) -> uLong;
}
extern "C" {
    pub fn uncompress(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn uncompress2(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: *mut uLong,
    ) -> ::core::ffi::c_int;
}
pub type gzFile = *mut gzFile_s;
extern "C" {
    pub fn gzdopen(fd: ::core::ffi::c_int, mode: *const ::core::ffi::c_char) -> gzFile;
}
extern "C" {
    pub fn gzbuffer(file: gzFile, size: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzsetparams(
        file: gzFile,
        level: ::core::ffi::c_int,
        strategy: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzread(file: gzFile, buf: voidp, len: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzfread(buf: voidp, size: z_size_t, nitems: z_size_t, file: gzFile) -> z_size_t;
}
extern "C" {
    pub fn gzwrite(file: gzFile, buf: voidpc, len: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzfwrite(buf: voidpc, size: z_size_t, nitems: z_size_t, file: gzFile) -> z_size_t;
}
extern "C" {
    pub fn gzprintf(file: gzFile, format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzputs(file: gzFile, s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzgets(
        file: gzFile,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn gzputc(file: gzFile, c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzgetc(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzungetc(c: ::core::ffi::c_int, file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzflush(file: gzFile, flush: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzrewind(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzeof(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzdirect(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzclose(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzclose_r(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzclose_w(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzerror(file: gzFile, errnum: *mut ::core::ffi::c_int) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn gzclearerr(file: gzFile);
}
extern "C" {
    pub fn adler32(adler: uLong, buf: *const Bytef, len: uInt) -> uLong;
}
extern "C" {
    pub fn adler32_z(adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong;
}
extern "C" {
    pub fn crc32(crc: uLong, buf: *const Bytef, len: uInt) -> uLong;
}
extern "C" {
    pub fn crc32_z(crc: uLong, buf: *const Bytef, len: z_size_t) -> uLong;
}
extern "C" {
    pub fn crc32_combine_op(crc1: uLong, crc2: uLong, op: uLong) -> uLong;
}
extern "C" {
    pub fn deflateInit_(
        strm: z_streamp,
        level: ::core::ffi::c_int,
        version: *const ::core::ffi::c_char,
        stream_size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateInit_(
        strm: z_streamp,
        version: *const ::core::ffi::c_char,
        stream_size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateInit2_(
        strm: z_streamp,
        level: ::core::ffi::c_int,
        method: ::core::ffi::c_int,
        windowBits: ::core::ffi::c_int,
        memLevel: ::core::ffi::c_int,
        strategy: ::core::ffi::c_int,
        version: *const ::core::ffi::c_char,
        stream_size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateInit2_(
        strm: z_streamp,
        windowBits: ::core::ffi::c_int,
        version: *const ::core::ffi::c_char,
        stream_size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateBackInit_(
        strm: z_streamp,
        windowBits: ::core::ffi::c_int,
        window: *mut ::core::ffi::c_uchar,
        version: *const ::core::ffi::c_char,
        stream_size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gzFile_s {
    pub have: ::core::ffi::c_uint,
    pub next: *mut ::core::ffi::c_uchar,
    pub pos: off_t,
}
#[test]
fn bindgen_test_layout_gzFile_s() {
    const UNINIT: ::core::mem::MaybeUninit<gzFile_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<gzFile_s>(),
        24usize,
        concat!("Size of: ", stringify!(gzFile_s))
    );
    assert_eq!(
        ::core::mem::align_of::<gzFile_s>(),
        8usize,
        concat!("Alignment of ", stringify!(gzFile_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).have) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gzFile_s),
            "::",
            stringify!(have)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gzFile_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gzFile_s),
            "::",
            stringify!(pos)
        )
    );
}
extern "C" {
    pub fn gzgetc_(file: gzFile) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzopen(arg1: *const ::core::ffi::c_char, arg2: *const ::core::ffi::c_char) -> gzFile;
}
extern "C" {
    pub fn gzseek(arg1: gzFile, arg2: off_t, arg3: ::core::ffi::c_int) -> off_t;
}
extern "C" {
    pub fn gztell(arg1: gzFile) -> off_t;
}
extern "C" {
    pub fn gzoffset(arg1: gzFile) -> off_t;
}
extern "C" {
    pub fn adler32_combine(arg1: uLong, arg2: uLong, arg3: off_t) -> uLong;
}
extern "C" {
    pub fn crc32_combine(arg1: uLong, arg2: uLong, arg3: off_t) -> uLong;
}
extern "C" {
    pub fn crc32_combine_gen(arg1: off_t) -> uLong;
}
extern "C" {
    pub fn zError(arg1: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn inflateSyncPoint(arg1: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn get_crc_table() -> *const z_crc_t;
}
extern "C" {
    pub fn inflateUndermine(arg1: z_streamp, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateValidate(arg1: z_streamp, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn inflateCodesUsed(arg1: z_streamp) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn inflateResetKeep(arg1: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn deflateResetKeep(arg1: z_streamp) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gzvprintf(
        file: gzFile,
        format: *const ::core::ffi::c_char,
        va: *mut __va_list_tag,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::core::ffi::c_int,
    pub tz_dsttime: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::core::mem::MaybeUninit<timezone> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::core::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::core::ffi::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::core::mem::MaybeUninit<itimerval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::core::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::core::ffi::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn utimes(__file: *const ::core::ffi::c_char, __tvp: *const timeval) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const ::core::ffi::c_char, __tvp: *const timeval)
        -> ::core::ffi::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::core::ffi::c_int, __tvp: *const timeval) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::core::ffi::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::core::mem::MaybeUninit<iovec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::core::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::core::ffi::c_uint;
pub type sa_family_t = ::core::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::core::ffi::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::core::ffi::c_char; 118usize],
    pub __ss_align: ::core::ffi::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr_storage> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_4 = 1;
pub const MSG_PEEK: _bindgen_ty_4 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_4 = 4;
pub const MSG_CTRUNC: _bindgen_ty_4 = 8;
pub const MSG_PROXY: _bindgen_ty_4 = 16;
pub const MSG_TRUNC: _bindgen_ty_4 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_4 = 64;
pub const MSG_EOR: _bindgen_ty_4 = 128;
pub const MSG_WAITALL: _bindgen_ty_4 = 256;
pub const MSG_FIN: _bindgen_ty_4 = 512;
pub const MSG_SYN: _bindgen_ty_4 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_4 = 2048;
pub const MSG_RST: _bindgen_ty_4 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_4 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_4 = 16384;
pub const MSG_MORE: _bindgen_ty_4 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_4 = 65536;
pub const MSG_BATCH: _bindgen_ty_4 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_4 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_4 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_4 = 1073741824;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::core::ffi::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::core::ffi::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::core::mem::MaybeUninit<msghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::core::ffi::c_int,
    pub cmsg_type: ::core::ffi::c_int,
    pub __cmsg_data: __IncompleteArrayField<::core::ffi::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::core::mem::MaybeUninit<cmsghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::core::ffi::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::core::mem::MaybeUninit<__kernel_fd_set> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type __kernel_key_t = ::core::ffi::c_int;
pub type __kernel_mqd_t = ::core::ffi::c_int;
pub type __kernel_old_uid_t = ::core::ffi::c_ushort;
pub type __kernel_old_gid_t = ::core::ffi::c_ushort;
pub type __kernel_old_dev_t = ::core::ffi::c_ulong;
pub type __kernel_long_t = ::core::ffi::c_long;
pub type __kernel_ulong_t = ::core::ffi::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::core::ffi::c_uint;
pub type __kernel_pid_t = ::core::ffi::c_int;
pub type __kernel_ipc_pid_t = ::core::ffi::c_int;
pub type __kernel_uid_t = ::core::ffi::c_uint;
pub type __kernel_gid_t = ::core::ffi::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::core::ffi::c_int;
pub type __kernel_uid32_t = ::core::ffi::c_uint;
pub type __kernel_gid32_t = ::core::ffi::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__kernel_fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::core::ffi::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::core::ffi::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::core::ffi::c_int;
pub type __kernel_clockid_t = ::core::ffi::c_int;
pub type __kernel_caddr_t = *mut ::core::ffi::c_char;
pub type __kernel_uid16_t = ::core::ffi::c_ushort;
pub type __kernel_gid16_t = ::core::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::core::ffi::c_int,
    pub l_linger: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::core::mem::MaybeUninit<linger> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::core::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::core::ffi::c_ushort,
    pub sa_data: [::core::ffi::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::core::mem::MaybeUninit<osockaddr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::core::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_6 = 0;
pub const SHUT_WR: _bindgen_ty_6 = 1;
pub const SHUT_RDWR: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::core::ffi::c_int,
        __type: ::core::ffi::c_int,
        __protocol: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::core::ffi::c_int,
        __type: ::core::ffi::c_int,
        __protocol: ::core::ffi::c_int,
        __fds: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::core::ffi::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::core::ffi::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::core::ffi::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::core::ffi::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __n: usize,
        __flags: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __n: usize,
        __flags: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __n: usize,
        __flags: ::core::ffi::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __n: usize,
        __flags: ::core::ffi::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::core::ffi::c_int,
        __message: *const msghdr,
        __flags: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::core::ffi::c_int,
        __message: *mut msghdr,
        __flags: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::core::ffi::c_int,
        __level: ::core::ffi::c_int,
        __optname: ::core::ffi::c_int,
        __optval: *mut ::core::ffi::c_void,
        __optlen: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::core::ffi::c_int,
        __level: ::core::ffi::c_int,
        __optname: ::core::ffi::c_int,
        __optval: *const ::core::ffi::c_void,
        __optlen: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn listen(__fd: ::core::ffi::c_int, __n: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::core::ffi::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn shutdown(__fd: ::core::ffi::c_int, __how: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: ::core::ffi::c_int, __fdtype: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::core::mem::MaybeUninit<in_addr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::core::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::core::ffi::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    const UNINIT: ::core::mem::MaybeUninit<ip_opts> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::core::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ip_dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ip_opts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::core::ffi::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::core::mem::MaybeUninit<in_pktinfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::core::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_7 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_7 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_7 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_7 = 4;
pub const IPPROTO_TCP: _bindgen_ty_7 = 6;
pub const IPPROTO_EGP: _bindgen_ty_7 = 8;
pub const IPPROTO_PUP: _bindgen_ty_7 = 12;
pub const IPPROTO_UDP: _bindgen_ty_7 = 17;
pub const IPPROTO_IDP: _bindgen_ty_7 = 22;
pub const IPPROTO_TP: _bindgen_ty_7 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_7 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_7 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_7 = 46;
pub const IPPROTO_GRE: _bindgen_ty_7 = 47;
pub const IPPROTO_ESP: _bindgen_ty_7 = 50;
pub const IPPROTO_AH: _bindgen_ty_7 = 51;
pub const IPPROTO_MTP: _bindgen_ty_7 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_7 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_7 = 98;
pub const IPPROTO_PIM: _bindgen_ty_7 = 103;
pub const IPPROTO_COMP: _bindgen_ty_7 = 108;
pub const IPPROTO_L2TP: _bindgen_ty_7 = 115;
pub const IPPROTO_SCTP: _bindgen_ty_7 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_7 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_7 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_7 = 143;
pub const IPPROTO_RAW: _bindgen_ty_7 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_7 = 262;
pub const IPPROTO_MAX: _bindgen_ty_7 = 263;
pub type _bindgen_ty_7 = ::core::ffi::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_8 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_8 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_8 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_8 = 58;
pub const IPPROTO_NONE: _bindgen_ty_8 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_8 = 60;
pub const IPPROTO_MH: _bindgen_ty_8 = 135;
pub type _bindgen_ty_8 = ::core::ffi::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_9 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_9 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_9 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_9 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_9 = 15;
pub const IPPORT_FTP: _bindgen_ty_9 = 21;
pub const IPPORT_TELNET: _bindgen_ty_9 = 23;
pub const IPPORT_SMTP: _bindgen_ty_9 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_9 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_9 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_9 = 43;
pub const IPPORT_MTP: _bindgen_ty_9 = 57;
pub const IPPORT_TFTP: _bindgen_ty_9 = 69;
pub const IPPORT_RJE: _bindgen_ty_9 = 77;
pub const IPPORT_FINGER: _bindgen_ty_9 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_9 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_9 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_9 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_9 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_9 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_9 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_9 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_9 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_9 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_9 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_9 = 5000;
pub type _bindgen_ty_9 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::core::mem::MaybeUninit<in6_addr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::core::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__in6_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::core::ffi::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr_in> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr_in6> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    const UNINIT: ::core::mem::MaybeUninit<ip_mreq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::core::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    const UNINIT: ::core::mem::MaybeUninit<ip_mreqn> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::core::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    const UNINIT: ::core::mem::MaybeUninit<ip_mreq_source> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::core::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    const UNINIT: ::core::mem::MaybeUninit<ipv6_mreq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::core::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipv6mr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipv6mr_interface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    const UNINIT: ::core::mem::MaybeUninit<group_req> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::core::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    const UNINIT: ::core::mem::MaybeUninit<group_source_req> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::core::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    const UNINIT: ::core::mem::MaybeUninit<ip_msfilter> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::core::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imsf_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imsf_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imsf_fmode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imsf_numsrc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imsf_slist) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    const UNINIT: ::core::mem::MaybeUninit<group_filter> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::core::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gf_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gf_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gf_fmode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gf_numsrc) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gf_slist) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::core::ffi::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::core::ffi::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::core::ffi::c_int;
}
pub type rfbBool = i8;
pub type rfbKeySym = u32;
pub type rfbPixel = u32;
#[doc = " Structures used in several messages\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbRectangle {
    pub x: u16,
    pub y: u16,
    pub w: u16,
    pub h: u16,
}
#[test]
fn bindgen_test_layout_rfbRectangle() {
    const UNINIT: ::core::mem::MaybeUninit<rfbRectangle> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbRectangle>(),
        8usize,
        concat!("Size of: ", stringify!(rfbRectangle))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbRectangle>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbRectangle))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbRectangle),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbRectangle),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbRectangle),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbRectangle),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbPixelFormat {
    pub bitsPerPixel: u8,
    pub depth: u8,
    pub bigEndian: u8,
    pub trueColour: u8,
    pub redMax: u16,
    pub greenMax: u16,
    pub blueMax: u16,
    pub redShift: u8,
    pub greenShift: u8,
    pub blueShift: u8,
    pub pad1: u8,
    pub pad2: u16,
}
#[test]
fn bindgen_test_layout_rfbPixelFormat() {
    const UNINIT: ::core::mem::MaybeUninit<rfbPixelFormat> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbPixelFormat>(),
        16usize,
        concat!("Size of: ", stringify!(rfbPixelFormat))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbPixelFormat>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbPixelFormat))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitsPerPixel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(bitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bigEndian) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(bigEndian)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).trueColour) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(trueColour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).redMax) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(redMax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).greenMax) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(greenMax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blueMax) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(blueMax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).redShift) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(redShift)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).greenShift) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(greenShift)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blueShift) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(blueShift)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPixelFormat),
            "::",
            stringify!(pad2)
        )
    );
}
pub type rfbProtocolVersionMsg = [::core::ffi::c_char; 13usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbClientInitMsg {
    pub shared: u8,
}
#[test]
fn bindgen_test_layout_rfbClientInitMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbClientInitMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbClientInitMsg>(),
        1usize,
        concat!("Size of: ", stringify!(rfbClientInitMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbClientInitMsg>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbClientInitMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientInitMsg),
            "::",
            stringify!(shared)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbServerInitMsg {
    pub framebufferWidth: u16,
    pub framebufferHeight: u16,
    pub format: rfbPixelFormat,
    pub nameLength: u32,
}
#[test]
fn bindgen_test_layout_rfbServerInitMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbServerInitMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbServerInitMsg>(),
        24usize,
        concat!("Size of: ", stringify!(rfbServerInitMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbServerInitMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbServerInitMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).framebufferWidth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerInitMsg),
            "::",
            stringify!(framebufferWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).framebufferHeight) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerInitMsg),
            "::",
            stringify!(framebufferHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerInitMsg),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nameLength) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerInitMsg),
            "::",
            stringify!(nameLength)
        )
    );
}
#[doc = " Server -> client message definitions\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbFramebufferUpdateMsg {
    pub type_: u8,
    pub pad: u8,
    pub nRects: u16,
}
#[test]
fn bindgen_test_layout_rfbFramebufferUpdateMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbFramebufferUpdateMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbFramebufferUpdateMsg>(),
        4usize,
        concat!("Size of: ", stringify!(rfbFramebufferUpdateMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbFramebufferUpdateMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbFramebufferUpdateMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nRects) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateMsg),
            "::",
            stringify!(nRects)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbFramebufferUpdateRectHeader {
    pub r: rfbRectangle,
    pub encoding: u32,
}
#[test]
fn bindgen_test_layout_rfbFramebufferUpdateRectHeader() {
    const UNINIT: ::core::mem::MaybeUninit<rfbFramebufferUpdateRectHeader> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbFramebufferUpdateRectHeader>(),
        12usize,
        concat!("Size of: ", stringify!(rfbFramebufferUpdateRectHeader))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbFramebufferUpdateRectHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbFramebufferUpdateRectHeader))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRectHeader),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRectHeader),
            "::",
            stringify!(encoding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbSupportedMessages {
    pub client2server: [u8; 32usize],
    pub server2client: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_rfbSupportedMessages() {
    const UNINIT: ::core::mem::MaybeUninit<rfbSupportedMessages> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbSupportedMessages>(),
        64usize,
        concat!("Size of: ", stringify!(rfbSupportedMessages))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbSupportedMessages>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbSupportedMessages))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).client2server) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSupportedMessages),
            "::",
            stringify!(client2server)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).server2client) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSupportedMessages),
            "::",
            stringify!(server2client)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbCopyRect {
    pub srcX: u16,
    pub srcY: u16,
}
#[test]
fn bindgen_test_layout_rfbCopyRect() {
    const UNINIT: ::core::mem::MaybeUninit<rfbCopyRect> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbCopyRect>(),
        4usize,
        concat!("Size of: ", stringify!(rfbCopyRect))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbCopyRect>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbCopyRect))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCopyRect),
            "::",
            stringify!(srcX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).srcY) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCopyRect),
            "::",
            stringify!(srcY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbRREHeader {
    pub nSubrects: u32,
}
#[test]
fn bindgen_test_layout_rfbRREHeader() {
    const UNINIT: ::core::mem::MaybeUninit<rfbRREHeader> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbRREHeader>(),
        4usize,
        concat!("Size of: ", stringify!(rfbRREHeader))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbRREHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbRREHeader))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nSubrects) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbRREHeader),
            "::",
            stringify!(nSubrects)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbCoRRERectangle {
    pub x: u8,
    pub y: u8,
    pub w: u8,
    pub h: u8,
}
#[test]
fn bindgen_test_layout_rfbCoRRERectangle() {
    const UNINIT: ::core::mem::MaybeUninit<rfbCoRRERectangle> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbCoRRERectangle>(),
        4usize,
        concat!("Size of: ", stringify!(rfbCoRRERectangle))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbCoRRERectangle>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbCoRRERectangle))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCoRRERectangle),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCoRRERectangle),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCoRRERectangle),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCoRRERectangle),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbZlibHeader {
    pub nBytes: u32,
}
#[test]
fn bindgen_test_layout_rfbZlibHeader() {
    const UNINIT: ::core::mem::MaybeUninit<rfbZlibHeader> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbZlibHeader>(),
        4usize,
        concat!("Size of: ", stringify!(rfbZlibHeader))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbZlibHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbZlibHeader))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nBytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbZlibHeader),
            "::",
            stringify!(nBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbXCursorColors {
    pub foreRed: u8,
    pub foreGreen: u8,
    pub foreBlue: u8,
    pub backRed: u8,
    pub backGreen: u8,
    pub backBlue: u8,
}
#[test]
fn bindgen_test_layout_rfbXCursorColors() {
    const UNINIT: ::core::mem::MaybeUninit<rfbXCursorColors> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbXCursorColors>(),
        6usize,
        concat!("Size of: ", stringify!(rfbXCursorColors))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbXCursorColors>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbXCursorColors))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).foreRed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXCursorColors),
            "::",
            stringify!(foreRed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).foreGreen) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXCursorColors),
            "::",
            stringify!(foreGreen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).foreBlue) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXCursorColors),
            "::",
            stringify!(foreBlue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backRed) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXCursorColors),
            "::",
            stringify!(backRed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backGreen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXCursorColors),
            "::",
            stringify!(backGreen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backBlue) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXCursorColors),
            "::",
            stringify!(backBlue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbZRLEHeader {
    pub length: u32,
}
#[test]
fn bindgen_test_layout_rfbZRLEHeader() {
    const UNINIT: ::core::mem::MaybeUninit<rfbZRLEHeader> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbZRLEHeader>(),
        4usize,
        concat!("Size of: ", stringify!(rfbZRLEHeader))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbZRLEHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbZRLEHeader))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbZRLEHeader),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbSetColourMapEntriesMsg {
    pub type_: u8,
    pub pad: u8,
    pub firstColour: u16,
    pub nColours: u16,
}
#[test]
fn bindgen_test_layout_rfbSetColourMapEntriesMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbSetColourMapEntriesMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbSetColourMapEntriesMsg>(),
        6usize,
        concat!("Size of: ", stringify!(rfbSetColourMapEntriesMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbSetColourMapEntriesMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbSetColourMapEntriesMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetColourMapEntriesMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetColourMapEntriesMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).firstColour) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetColourMapEntriesMsg),
            "::",
            stringify!(firstColour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nColours) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetColourMapEntriesMsg),
            "::",
            stringify!(nColours)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbBellMsg {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_rfbBellMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbBellMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbBellMsg>(),
        1usize,
        concat!("Size of: ", stringify!(rfbBellMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbBellMsg>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbBellMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbBellMsg),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbServerCutTextMsg {
    pub type_: u8,
    pub pad1: u8,
    pub pad2: u16,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_rfbServerCutTextMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbServerCutTextMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbServerCutTextMsg>(),
        8usize,
        concat!("Size of: ", stringify!(rfbServerCutTextMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbServerCutTextMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbServerCutTextMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerCutTextMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerCutTextMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerCutTextMsg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerCutTextMsg),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbFileTransferMsg {
    pub type_: u8,
    pub contentType: u8,
    pub contentParam: u8,
    pub pad: u8,
    pub size: u32,
    pub length: u32,
}
#[test]
fn bindgen_test_layout__rfbFileTransferMsg() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbFileTransferMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbFileTransferMsg>(),
        12usize,
        concat!("Size of: ", stringify!(_rfbFileTransferMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbFileTransferMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(_rfbFileTransferMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).contentType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferMsg),
            "::",
            stringify!(contentType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).contentParam) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferMsg),
            "::",
            stringify!(contentParam)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferMsg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferMsg),
            "::",
            stringify!(length)
        )
    );
}
pub type rfbFileTransferMsg = _rfbFileTransferMsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbTextChatMsg {
    pub type_: u8,
    pub pad1: u8,
    pub pad2: u16,
    pub length: u32,
}
#[test]
fn bindgen_test_layout__rfbTextChatMsg() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbTextChatMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbTextChatMsg>(),
        8usize,
        concat!("Size of: ", stringify!(_rfbTextChatMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbTextChatMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(_rfbTextChatMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbTextChatMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbTextChatMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbTextChatMsg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbTextChatMsg),
            "::",
            stringify!(length)
        )
    );
}
pub type rfbTextChatMsg = _rfbTextChatMsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbXvpMsg {
    pub type_: u8,
    pub pad: u8,
    pub version: u8,
    pub code: u8,
}
#[test]
fn bindgen_test_layout_rfbXvpMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbXvpMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbXvpMsg>(),
        4usize,
        concat!("Size of: ", stringify!(rfbXvpMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbXvpMsg>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbXvpMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXvpMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXvpMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXvpMsg),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbXvpMsg),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbExtDesktopSizeMsg {
    pub numberOfScreens: u8,
    pub pad: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_rfbExtDesktopSizeMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbExtDesktopSizeMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbExtDesktopSizeMsg>(),
        4usize,
        concat!("Size of: ", stringify!(rfbExtDesktopSizeMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbExtDesktopSizeMsg>(),
        1usize,
        concat!("Alignment of ", stringify!(rfbExtDesktopSizeMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numberOfScreens) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopSizeMsg),
            "::",
            stringify!(numberOfScreens)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopSizeMsg),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbExtDesktopScreen {
    pub id: u32,
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_rfbExtDesktopScreen() {
    const UNINIT: ::core::mem::MaybeUninit<rfbExtDesktopScreen> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbExtDesktopScreen>(),
        16usize,
        concat!("Size of: ", stringify!(rfbExtDesktopScreen))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbExtDesktopScreen>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbExtDesktopScreen))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopScreen),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopScreen),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopScreen),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopScreen),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopScreen),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbExtDesktopScreen),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbSetDesktopSizeMsg {
    pub type_: u8,
    pub pad1: u8,
    pub width: u16,
    pub height: u16,
    pub numberOfScreens: u8,
    pub pad2: u8,
}
#[test]
fn bindgen_test_layout_rfbSetDesktopSizeMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbSetDesktopSizeMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbSetDesktopSizeMsg>(),
        8usize,
        concat!("Size of: ", stringify!(rfbSetDesktopSizeMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbSetDesktopSizeMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbSetDesktopSizeMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetDesktopSizeMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetDesktopSizeMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetDesktopSizeMsg),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetDesktopSizeMsg),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numberOfScreens) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetDesktopSizeMsg),
            "::",
            stringify!(numberOfScreens)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetDesktopSizeMsg),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbResizeFrameBufferMsg {
    pub type_: u8,
    pub pad1: u8,
    pub framebufferWidth: u16,
    pub framebufferHeigth: u16,
}
#[test]
fn bindgen_test_layout__rfbResizeFrameBufferMsg() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbResizeFrameBufferMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbResizeFrameBufferMsg>(),
        6usize,
        concat!("Size of: ", stringify!(_rfbResizeFrameBufferMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbResizeFrameBufferMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(_rfbResizeFrameBufferMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbResizeFrameBufferMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbResizeFrameBufferMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).framebufferWidth) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbResizeFrameBufferMsg),
            "::",
            stringify!(framebufferWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).framebufferHeigth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbResizeFrameBufferMsg),
            "::",
            stringify!(framebufferHeigth)
        )
    );
}
pub type rfbResizeFrameBufferMsg = _rfbResizeFrameBufferMsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbPalmVNCReSizeFrameBufferMsg {
    pub type_: u8,
    pub pad1: u8,
    pub desktop_w: u16,
    pub desktop_h: u16,
    pub buffer_w: u16,
    pub buffer_h: u16,
    pub pad2: u16,
}
#[test]
fn bindgen_test_layout_rfbPalmVNCReSizeFrameBufferMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbPalmVNCReSizeFrameBufferMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbPalmVNCReSizeFrameBufferMsg>(),
        12usize,
        concat!("Size of: ", stringify!(rfbPalmVNCReSizeFrameBufferMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbPalmVNCReSizeFrameBufferMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbPalmVNCReSizeFrameBufferMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desktop_w) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(desktop_w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desktop_h) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(desktop_h)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer_w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(buffer_w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer_h) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(buffer_h)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCReSizeFrameBufferMsg),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rfbServerToClientMsg {
    pub type_: u8,
    pub fu: rfbFramebufferUpdateMsg,
    pub scme: rfbSetColourMapEntriesMsg,
    pub b: rfbBellMsg,
    pub sct: rfbServerCutTextMsg,
    pub rsfb: rfbResizeFrameBufferMsg,
    pub prsfb: rfbPalmVNCReSizeFrameBufferMsg,
    pub ft: rfbFileTransferMsg,
    pub tc: rfbTextChatMsg,
    pub xvp: rfbXvpMsg,
    pub eds: rfbExtDesktopSizeMsg,
}
#[test]
fn bindgen_test_layout_rfbServerToClientMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbServerToClientMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbServerToClientMsg>(),
        12usize,
        concat!("Size of: ", stringify!(rfbServerToClientMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbServerToClientMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbServerToClientMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(fu)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scme) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(scme)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(sct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rsfb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(rsfb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prsfb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(prsfb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(tc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xvp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(xvp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).eds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbServerToClientMsg),
            "::",
            stringify!(eds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbCacheRect {
    pub special: u16,
}
#[test]
fn bindgen_test_layout_rfbCacheRect() {
    const UNINIT: ::core::mem::MaybeUninit<rfbCacheRect> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbCacheRect>(),
        2usize,
        concat!("Size of: ", stringify!(rfbCacheRect))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbCacheRect>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbCacheRect))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).special) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCacheRect),
            "::",
            stringify!(special)
        )
    );
}
#[doc = " Message definitions (client -> server)\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbSetPixelFormatMsg {
    pub type_: u8,
    pub pad1: u8,
    pub pad2: u16,
    pub format: rfbPixelFormat,
}
#[test]
fn bindgen_test_layout_rfbSetPixelFormatMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbSetPixelFormatMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbSetPixelFormatMsg>(),
        20usize,
        concat!("Size of: ", stringify!(rfbSetPixelFormatMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbSetPixelFormatMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbSetPixelFormatMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetPixelFormatMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetPixelFormatMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetPixelFormatMsg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetPixelFormatMsg),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbFixColourMapEntriesMsg {
    pub type_: u8,
    pub pad: u8,
    pub firstColour: u16,
    pub nColours: u16,
}
#[test]
fn bindgen_test_layout_rfbFixColourMapEntriesMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbFixColourMapEntriesMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbFixColourMapEntriesMsg>(),
        6usize,
        concat!("Size of: ", stringify!(rfbFixColourMapEntriesMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbFixColourMapEntriesMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbFixColourMapEntriesMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFixColourMapEntriesMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFixColourMapEntriesMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).firstColour) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFixColourMapEntriesMsg),
            "::",
            stringify!(firstColour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nColours) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFixColourMapEntriesMsg),
            "::",
            stringify!(nColours)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbSetEncodingsMsg {
    pub type_: u8,
    pub pad: u8,
    pub nEncodings: u16,
}
#[test]
fn bindgen_test_layout_rfbSetEncodingsMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbSetEncodingsMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbSetEncodingsMsg>(),
        4usize,
        concat!("Size of: ", stringify!(rfbSetEncodingsMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbSetEncodingsMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbSetEncodingsMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetEncodingsMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetEncodingsMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nEncodings) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbSetEncodingsMsg),
            "::",
            stringify!(nEncodings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbFramebufferUpdateRequestMsg {
    pub type_: u8,
    pub incremental: u8,
    pub x: u16,
    pub y: u16,
    pub w: u16,
    pub h: u16,
}
#[test]
fn bindgen_test_layout_rfbFramebufferUpdateRequestMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbFramebufferUpdateRequestMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbFramebufferUpdateRequestMsg>(),
        10usize,
        concat!("Size of: ", stringify!(rfbFramebufferUpdateRequestMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbFramebufferUpdateRequestMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbFramebufferUpdateRequestMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRequestMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).incremental) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRequestMsg),
            "::",
            stringify!(incremental)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRequestMsg),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRequestMsg),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRequestMsg),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFramebufferUpdateRequestMsg),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbKeyEventMsg {
    pub type_: u8,
    pub down: u8,
    pub pad: u16,
    pub key: u32,
}
#[test]
fn bindgen_test_layout_rfbKeyEventMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbKeyEventMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbKeyEventMsg>(),
        8usize,
        concat!("Size of: ", stringify!(rfbKeyEventMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbKeyEventMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbKeyEventMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbKeyEventMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbKeyEventMsg),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbKeyEventMsg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbKeyEventMsg),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbQemuExtendedKeyEventMsg {
    pub type_: u8,
    pub subtype: u8,
    pub down: u16,
    pub keysym: u32,
    pub keycode: u32,
}
#[test]
fn bindgen_test_layout_rfbQemuExtendedKeyEventMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbQemuExtendedKeyEventMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbQemuExtendedKeyEventMsg>(),
        12usize,
        concat!("Size of: ", stringify!(rfbQemuExtendedKeyEventMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbQemuExtendedKeyEventMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbQemuExtendedKeyEventMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbQemuExtendedKeyEventMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).subtype) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbQemuExtendedKeyEventMsg),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbQemuExtendedKeyEventMsg),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keysym) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbQemuExtendedKeyEventMsg),
            "::",
            stringify!(keysym)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keycode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbQemuExtendedKeyEventMsg),
            "::",
            stringify!(keycode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbPointerEventMsg {
    pub type_: u8,
    pub buttonMask: u8,
    pub x: u16,
    pub y: u16,
}
#[test]
fn bindgen_test_layout_rfbPointerEventMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbPointerEventMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbPointerEventMsg>(),
        6usize,
        concat!("Size of: ", stringify!(rfbPointerEventMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbPointerEventMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbPointerEventMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPointerEventMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buttonMask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPointerEventMsg),
            "::",
            stringify!(buttonMask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPointerEventMsg),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPointerEventMsg),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbClientCutTextMsg {
    pub type_: u8,
    pub pad1: u8,
    pub pad2: u16,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_rfbClientCutTextMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbClientCutTextMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbClientCutTextMsg>(),
        8usize,
        concat!("Size of: ", stringify!(rfbClientCutTextMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbClientCutTextMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbClientCutTextMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientCutTextMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientCutTextMsg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientCutTextMsg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientCutTextMsg),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbSetScaleMsg {
    pub type_: u8,
    pub scale: u8,
    pub pad: u16,
}
#[test]
fn bindgen_test_layout__rfbSetScaleMsg() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbSetScaleMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbSetScaleMsg>(),
        4usize,
        concat!("Size of: ", stringify!(_rfbSetScaleMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbSetScaleMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(_rfbSetScaleMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetScaleMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetScaleMsg),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetScaleMsg),
            "::",
            stringify!(pad)
        )
    );
}
pub type rfbSetScaleMsg = _rfbSetScaleMsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbPalmVNCSetScaleFactorMsg {
    pub type_: u8,
    pub scale: u8,
    pub pad2: u16,
}
#[test]
fn bindgen_test_layout_rfbPalmVNCSetScaleFactorMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbPalmVNCSetScaleFactorMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbPalmVNCSetScaleFactorMsg>(),
        4usize,
        concat!("Size of: ", stringify!(rfbPalmVNCSetScaleFactorMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbPalmVNCSetScaleFactorMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(rfbPalmVNCSetScaleFactorMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCSetScaleFactorMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCSetScaleFactorMsg),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbPalmVNCSetScaleFactorMsg),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbSetServerInputMsg {
    pub type_: u8,
    pub status: u8,
    pub pad: u16,
}
#[test]
fn bindgen_test_layout__rfbSetServerInputMsg() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbSetServerInputMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbSetServerInputMsg>(),
        4usize,
        concat!("Size of: ", stringify!(_rfbSetServerInputMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbSetServerInputMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(_rfbSetServerInputMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetServerInputMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetServerInputMsg),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetServerInputMsg),
            "::",
            stringify!(pad)
        )
    );
}
pub type rfbSetServerInputMsg = _rfbSetServerInputMsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbSetSWMsg {
    pub type_: u8,
    pub status: u8,
    pub x: u16,
    pub y: u16,
}
#[test]
fn bindgen_test_layout__rfbSetSWMsg() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbSetSWMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbSetSWMsg>(),
        6usize,
        concat!("Size of: ", stringify!(_rfbSetSWMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbSetSWMsg>(),
        2usize,
        concat!("Alignment of ", stringify!(_rfbSetSWMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetSWMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetSWMsg),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetSWMsg),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSetSWMsg),
            "::",
            stringify!(y)
        )
    );
}
pub type rfbSetSWMsg = _rfbSetSWMsg;
#[repr(C)]
#[derive(Copy, Clone)]
pub union rfbClientToServerMsg {
    pub type_: u8,
    pub spf: rfbSetPixelFormatMsg,
    pub fcme: rfbFixColourMapEntriesMsg,
    pub se: rfbSetEncodingsMsg,
    pub fur: rfbFramebufferUpdateRequestMsg,
    pub ke: rfbKeyEventMsg,
    pub pe: rfbPointerEventMsg,
    pub cct: rfbClientCutTextMsg,
    pub ssc: rfbSetScaleMsg,
    pub pssf: rfbPalmVNCSetScaleFactorMsg,
    pub sim: rfbSetServerInputMsg,
    pub ft: rfbFileTransferMsg,
    pub sw: rfbSetSWMsg,
    pub tc: rfbTextChatMsg,
    pub xvp: rfbXvpMsg,
    pub sdm: rfbSetDesktopSizeMsg,
}
#[test]
fn bindgen_test_layout_rfbClientToServerMsg() {
    const UNINIT: ::core::mem::MaybeUninit<rfbClientToServerMsg> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbClientToServerMsg>(),
        20usize,
        concat!("Size of: ", stringify!(rfbClientToServerMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbClientToServerMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rfbClientToServerMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).spf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(spf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fcme) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(fcme)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(fur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ke) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(ke)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pe) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(pe)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(cct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ssc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(ssc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pssf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(pssf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sim) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(sim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(ft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(sw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(tc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xvp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(xvp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sdm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientToServerMsg),
            "::",
            stringify!(sdm)
        )
    );
}
extern "C" {
    pub fn rfbEncryptAndStorePasswd(
        passwd: *mut ::core::ffi::c_char,
        fname: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbDecryptPasswdFromFile(fname: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rfbRandomBytes(bytes: *mut ::core::ffi::c_uchar);
}
extern "C" {
    pub fn rfbEncryptBytes(bytes: *mut ::core::ffi::c_uchar, passwd: *mut ::core::ffi::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::core::mem::MaybeUninit<sched_param> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::core::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::core::mem::MaybeUninit<cpu_set_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::core::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::core::ffi::c_int,
        __param: *const sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::core::ffi::c_int,
    pub tm_min: ::core::ffi::c_int,
    pub tm_hour: ::core::ffi::c_int,
    pub tm_mday: ::core::ffi::c_int,
    pub tm_mon: ::core::ffi::c_int,
    pub tm_year: ::core::ffi::c_int,
    pub tm_wday: ::core::ffi::c_int,
    pub tm_yday: ::core::ffi::c_int,
    pub tm_isdst: ::core::ffi::c_int,
    pub tm_gmtoff: ::core::ffi::c_long,
    pub tm_zone: *const ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::core::mem::MaybeUninit<tm> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::core::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::core::mem::MaybeUninit<itimerspec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::core::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::core::ffi::c_char,
        __maxsize: usize,
        __format: *const ::core::ffi::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::core::ffi::c_char,
        __maxsize: usize,
        __format: *const ::core::ffi::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::core::ffi::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::core::ffi::c_int;
}
extern "C" {
    pub static mut __timezone: ::core::ffi::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::core::ffi::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::core::ffi::c_int;
}
extern "C" {
    pub static mut timezone: ::core::ffi::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::core::ffi::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::core::ffi::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
pub type __jmp_buf = [::core::ffi::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::core::ffi::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::core::mem::MaybeUninit<__jmp_buf_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_10 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::core::ffi::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_11 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_11 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_11 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_11 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_11 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_11 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_11 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_11 = 0;
pub type _bindgen_ty_11 = ::core::ffi::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_12 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_12 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_12 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_12 = 1;
pub type _bindgen_ty_12 = ::core::ffi::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_13 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_13 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::core::ffi::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_14 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_14 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_14 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_14 = 0;
pub type _bindgen_ty_14 = ::core::ffi::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_15 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = ::core::ffi::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_16 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_16 = 1;
pub type _bindgen_ty_16 = ::core::ffi::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_17 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_17 = 1;
pub type _bindgen_ty_17 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub __arg: *mut ::core::ffi::c_void,
    pub __canceltype: ::core::ffi::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    const UNINIT: ::core::mem::MaybeUninit<_pthread_cleanup_buffer> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::core::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_18 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = ::core::ffi::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_19 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::core::ffi::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
        >,
        __arg: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::core::ffi::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::core::ffi::c_void,
        __stacksize: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::core::ffi::c_void,
        __stacksize: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::core::ffi::c_int,
        __param: *const sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::core::ffi::c_int,
        __param: *mut sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::core::ffi::c_int,
        __oldstate: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::core::ffi::c_int,
        __oldtype: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___cancel_jmp_buf_tag() {
    const UNINIT: ::core::mem::MaybeUninit<__cancel_jmp_buf_tag> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__cancel_jmp_buf_tag>(),
        72usize,
        concat!("Size of: ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__cancel_jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::core::ffi::c_void; 4usize],
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_unwind_buf_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub __cancel_arg: *mut ::core::ffi::c_void,
    pub __do_it: ::core::ffi::c_int,
    pub __cancel_type: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    const UNINIT: ::core::mem::MaybeUninit<__pthread_cleanup_frame> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::core::ffi::c_int,
        __old_ceiling: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void),
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::core::option::Option<unsafe extern "C" fn()>,
        __parent: ::core::option::Option<unsafe extern "C" fn()>,
        __child: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
pub const rfbNewClientAction_RFB_CLIENT_ACCEPT: rfbNewClientAction = 0;
pub const rfbNewClientAction_RFB_CLIENT_ON_HOLD: rfbNewClientAction = 1;
pub const rfbNewClientAction_RFB_CLIENT_REFUSE: rfbNewClientAction = 2;
pub type rfbNewClientAction = ::core::ffi::c_uint;
pub const rfbSocketState_RFB_SOCKET_INIT: rfbSocketState = 0;
pub const rfbSocketState_RFB_SOCKET_READY: rfbSocketState = 1;
pub const rfbSocketState_RFB_SOCKET_SHUTDOWN: rfbSocketState = 2;
pub type rfbSocketState = ::core::ffi::c_uint;
pub type rfbKbdAddEventProcPtr = ::core::option::Option<
    unsafe extern "C" fn(down: rfbBool, keySym: rfbKeySym, cl: *mut _rfbClientRec),
>;
pub type rfbKbdReleaseAllKeysProcPtr =
    ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec)>;
pub type rfbPtrAddEventProcPtr = ::core::option::Option<
    unsafe extern "C" fn(
        buttonMask: ::core::ffi::c_int,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        cl: *mut _rfbClientRec,
    ),
>;
pub type rfbSetXCutTextProcPtr = ::core::option::Option<
    unsafe extern "C" fn(
        str_: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        cl: *mut _rfbClientRec,
    ),
>;
pub type rfbSetXCutTextUTF8ProcPtr = ::core::option::Option<
    unsafe extern "C" fn(
        str_: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        cl: *mut _rfbClientRec,
    ),
>;
pub type rfbGetCursorProcPtr =
    ::core::option::Option<unsafe extern "C" fn(pScreen: *mut _rfbClientRec) -> *mut rfbCursor>;
pub type rfbSetTranslateFunctionProcPtr =
    ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec) -> rfbBool>;
pub type rfbPasswordCheckProcPtr = ::core::option::Option<
    unsafe extern "C" fn(
        cl: *mut _rfbClientRec,
        encryptedPassWord: *const ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> rfbBool,
>;
pub type rfbNewClientHookPtr =
    ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec) -> rfbNewClientAction>;
pub type rfbDisplayHookPtr = ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec)>;
pub type rfbDisplayFinishedHookPtr = ::core::option::Option<
    unsafe extern "C" fn(cl: *mut _rfbClientRec, result: ::core::ffi::c_int),
>;
#[doc = " support the capability to view the caps/num/scroll states of the X server"]
pub type rfbGetKeyboardLedStateHookPtr =
    ::core::option::Option<unsafe extern "C" fn(screen: *mut _rfbScreenInfo) -> ::core::ffi::c_int>;
pub type rfbXvpHookPtr = ::core::option::Option<
    unsafe extern "C" fn(cl: *mut _rfbClientRec, arg1: u8, arg2: u8) -> rfbBool,
>;
pub type rfbSetDesktopSizeHookPtr = ::core::option::Option<
    unsafe extern "C" fn(
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        numScreens: ::core::ffi::c_int,
        extDesktopScreens: *mut rfbExtDesktopScreen,
        cl: *mut _rfbClientRec,
    ) -> ::core::ffi::c_int,
>;
pub type rfbNumberOfExtDesktopScreensPtr =
    ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec) -> ::core::ffi::c_int>;
pub type rfbGetExtDesktopScreenPtr = ::core::option::Option<
    unsafe extern "C" fn(
        seqnumber: ::core::ffi::c_int,
        extDesktopScreen: *mut rfbExtDesktopScreen,
        cl: *mut _rfbClientRec,
    ) -> rfbBool,
>;
#[doc = " If x==1 and y==1 then set the whole display\n else find the window underneath x and y and set the framebuffer to the dimensions\n of that window"]
pub type rfbSetSingleWindowProcPtr = ::core::option::Option<
    unsafe extern "C" fn(cl: *mut _rfbClientRec, x: ::core::ffi::c_int, y: ::core::ffi::c_int),
>;
#[doc = " Status determines if the X11 server permits input from the local user\n status==0 or 1"]
pub type rfbSetServerInputProcPtr = ::core::option::Option<
    unsafe extern "C" fn(cl: *mut _rfbClientRec, status: ::core::ffi::c_int),
>;
#[doc = " Permit the server to allow or deny filetransfers.   This is defaulted to deny\n It is called when a client initiates a connection to determine if it is permitted."]
pub type rfbFileTransferPermitted =
    ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec) -> ::core::ffi::c_int>;
#[doc = " Handle the textchat messages"]
pub type rfbSetTextChat = ::core::option::Option<
    unsafe extern "C" fn(
        cl: *mut _rfbClientRec,
        length: ::core::ffi::c_int,
        string: *mut ::core::ffi::c_char,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rfbColourMap {
    pub count: u32,
    #[doc = "< is the data format short?"]
    pub is16: rfbBool,
    #[doc = "< there have to be count*3 entries"]
    pub data: rfbColourMap__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rfbColourMap__bindgen_ty_1 {
    pub bytes: *mut u8,
    pub shorts: *mut u16,
}
#[test]
fn bindgen_test_layout_rfbColourMap__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<rfbColourMap__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbColourMap__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rfbColourMap__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbColourMap__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rfbColourMap__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbColourMap__bindgen_ty_1),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shorts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbColourMap__bindgen_ty_1),
            "::",
            stringify!(shorts)
        )
    );
}
#[test]
fn bindgen_test_layout_rfbColourMap() {
    const UNINIT: ::core::mem::MaybeUninit<rfbColourMap> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbColourMap>(),
        16usize,
        concat!("Size of: ", stringify!(rfbColourMap))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbColourMap>(),
        8usize,
        concat!("Alignment of ", stringify!(rfbColourMap))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbColourMap),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is16) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbColourMap),
            "::",
            stringify!(is16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbColourMap),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " Security handling (RFB protocol version 3.7)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbSecurity {
    pub type_: u8,
    pub handler: ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec)>,
    pub next: *mut _rfbSecurity,
}
#[test]
fn bindgen_test_layout__rfbSecurity() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbSecurity> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbSecurity>(),
        24usize,
        concat!("Size of: ", stringify!(_rfbSecurity))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbSecurity>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbSecurity))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSecurity),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSecurity),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbSecurity),
            "::",
            stringify!(next)
        )
    );
}
#[doc = " Security handling (RFB protocol version 3.7)"]
pub type rfbSecurityHandler = _rfbSecurity;
#[doc = " Protocol extension handling."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbProtocolExtension {
    #[doc = " returns FALSE if extension should be deactivated for client.\nif newClient == NULL, it is always deactivated."]
    pub newClient: ::core::option::Option<
        unsafe extern "C" fn(
            client: *mut _rfbClientRec,
            data: *mut *mut ::core::ffi::c_void,
        ) -> rfbBool,
    >,
    #[doc = " returns FALSE if extension should be deactivated for client.\nif init == NULL, it stays activated."]
    pub init: ::core::option::Option<
        unsafe extern "C" fn(client: *mut _rfbClientRec, data: *mut ::core::ffi::c_void) -> rfbBool,
    >,
    #[doc = " if pseudoEncodings is not NULL, it contains a 0 terminated\nlist of the pseudo encodings handled by this extension."]
    pub pseudoEncodings: *mut ::core::ffi::c_int,
    #[doc = " returns TRUE if that pseudo encoding is handled by the extension.\nencodingNumber==0 means \"reset encodings\"."]
    pub enablePseudoEncoding: ::core::option::Option<
        unsafe extern "C" fn(
            client: *mut _rfbClientRec,
            data: *mut *mut ::core::ffi::c_void,
            encodingNumber: ::core::ffi::c_int,
        ) -> rfbBool,
    >,
    #[doc = " returns TRUE if message was handled"]
    pub handleMessage: ::core::option::Option<
        unsafe extern "C" fn(
            client: *mut _rfbClientRec,
            data: *mut ::core::ffi::c_void,
            message: *const rfbClientToServerMsg,
        ) -> rfbBool,
    >,
    pub close: ::core::option::Option<
        unsafe extern "C" fn(client: *mut _rfbClientRec, data: *mut ::core::ffi::c_void),
    >,
    pub usage: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " processArguments returns the number of handled arguments"]
    pub processArgument: ::core::option::Option<
        unsafe extern "C" fn(
            argc: ::core::ffi::c_int,
            argv: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub next: *mut _rfbProtocolExtension,
}
#[test]
fn bindgen_test_layout__rfbProtocolExtension() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbProtocolExtension> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbProtocolExtension>(),
        72usize,
        concat!("Size of: ", stringify!(_rfbProtocolExtension))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbProtocolExtension>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbProtocolExtension))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newClient) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(newClient)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pseudoEncodings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(pseudoEncodings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enablePseudoEncoding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(enablePseudoEncoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handleMessage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(handleMessage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).processArgument) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(processArgument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbProtocolExtension),
            "::",
            stringify!(next)
        )
    );
}
#[doc = " Protocol extension handling."]
pub type rfbProtocolExtension = _rfbProtocolExtension;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbExtensionData {
    pub extension: *mut rfbProtocolExtension,
    pub data: *mut ::core::ffi::c_void,
    pub next: *mut _rfbExtensionData,
}
#[test]
fn bindgen_test_layout__rfbExtensionData() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbExtensionData> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbExtensionData>(),
        24usize,
        concat!("Size of: ", stringify!(_rfbExtensionData))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbExtensionData>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbExtensionData))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extension) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbExtensionData),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbExtensionData),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbExtensionData),
            "::",
            stringify!(next)
        )
    );
}
pub type rfbExtensionData = _rfbExtensionData;
#[doc = " Per-screen (framebuffer) structure.  There can be as many as you wish,\n each serving different clients. However, you have to call\n rfbProcessEvents for each of these."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _rfbScreenInfo {
    #[doc = " this structure has children that are scaled versions of this screen"]
    pub scaledScreenNext: *mut _rfbScreenInfo,
    pub scaledScreenRefCount: ::core::ffi::c_int,
    pub width: ::core::ffi::c_int,
    pub paddedWidthInBytes: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub depth: ::core::ffi::c_int,
    pub bitsPerPixel: ::core::ffi::c_int,
    pub sizeInBytes: ::core::ffi::c_int,
    pub blackPixel: rfbPixel,
    pub whitePixel: rfbPixel,
    #[doc = " some screen specific data can be put into a struct where screenData\n points to. You need this if you have more than one screen at the\n same time while using the same functions."]
    pub screenData: *mut ::core::ffi::c_void,
    pub serverFormat: rfbPixelFormat,
    #[doc = "< set this if rfbServerFormat.trueColour==FALSE"]
    pub colourMap: rfbColourMap,
    pub desktopName: *const ::core::ffi::c_char,
    pub thisHost: [::core::ffi::c_char; 255usize],
    pub autoPort: rfbBool,
    pub port: ::core::ffi::c_int,
    pub listenSock: ::core::ffi::c_int,
    pub maxSock: ::core::ffi::c_int,
    pub maxFd: ::core::ffi::c_int,
    pub allFds: fd_set,
    pub socketState: rfbSocketState,
    pub inetdSock: ::core::ffi::c_int,
    pub inetdInitDone: rfbBool,
    pub udpPort: ::core::ffi::c_int,
    pub udpSock: ::core::ffi::c_int,
    pub udpClient: *mut _rfbClientRec,
    pub udpSockConnected: rfbBool,
    pub udpRemoteAddr: sockaddr_in,
    pub maxClientWait: ::core::ffi::c_int,
    pub httpInitDone: rfbBool,
    pub httpEnableProxyConnect: rfbBool,
    pub httpPort: ::core::ffi::c_int,
    pub httpDir: *mut ::core::ffi::c_char,
    pub httpListenSock: ::core::ffi::c_int,
    pub httpSock: ::core::ffi::c_int,
    pub passwordCheck: rfbPasswordCheckProcPtr,
    pub authPasswdData: *mut ::core::ffi::c_void,
    #[doc = " If rfbAuthPasswdData is given a list, this is the first\nview only password."]
    pub authPasswdFirstViewOnly: ::core::ffi::c_int,
    #[doc = " send only this many rectangles in one update"]
    pub maxRectsPerUpdate: ::core::ffi::c_int,
    #[doc = " this is the amount of milliseconds to wait at least before sending\n an update."]
    pub deferUpdateTime: ::core::ffi::c_int,
    pub alwaysShared: rfbBool,
    pub neverShared: rfbBool,
    pub dontDisconnect: rfbBool,
    pub clientHead: *mut _rfbClientRec,
    #[doc = "< \"Mutex\" for pointer events"]
    pub pointerClient: *mut _rfbClientRec,
    pub cursorX: ::core::ffi::c_int,
    pub cursorY: ::core::ffi::c_int,
    pub underCursorBufferLen: ::core::ffi::c_int,
    pub underCursorBuffer: *mut ::core::ffi::c_char,
    pub dontConvertRichCursorToXCursor: rfbBool,
    pub cursor: *mut rfbCursor,
    #[doc = " the frameBuffer has to be supplied by the serving process.\n The buffer will not be freed by"]
    pub frameBuffer: *mut ::core::ffi::c_char,
    pub kbdAddEvent: rfbKbdAddEventProcPtr,
    pub kbdReleaseAllKeys: rfbKbdReleaseAllKeysProcPtr,
    pub ptrAddEvent: rfbPtrAddEventProcPtr,
    pub setXCutText: rfbSetXCutTextProcPtr,
    pub getCursorPtr: rfbGetCursorProcPtr,
    pub setTranslateFunction: rfbSetTranslateFunctionProcPtr,
    pub setSingleWindow: rfbSetSingleWindowProcPtr,
    pub setServerInput: rfbSetServerInputProcPtr,
    pub getFileTransferPermission: rfbFileTransferPermitted,
    pub setTextChat: rfbSetTextChat,
    #[doc = " newClientHook is called just after a new client is created"]
    pub newClientHook: rfbNewClientHookPtr,
    #[doc = " displayHook is called just before a frame buffer update"]
    pub displayHook: rfbDisplayHookPtr,
    #[doc = " These hooks are called to pass keyboard state back to the client"]
    pub getKeyboardLedStateHook: rfbGetKeyboardLedStateHookPtr,
    pub cursorMutex: pthread_mutex_t,
    pub backgroundLoop: rfbBool,
    #[doc = " if TRUE, an ignoring signal handler is installed for SIGPIPE"]
    pub ignoreSIGPIPE: rfbBool,
    #[doc = " if not zero, only a slice of this height is processed every time\n an update should be sent. This should make working on a slow\n link more interactive."]
    pub progressiveSliceHeight: ::core::ffi::c_int,
    pub listenInterface: in_addr_t,
    pub deferPtrUpdateTime: ::core::ffi::c_int,
    #[doc = " handle as many input events as possible (default off)"]
    pub handleEventsEagerly: rfbBool,
    #[doc = " rfbEncodingServerIdentity"]
    pub versionString: *mut ::core::ffi::c_char,
    #[doc = " What does the server tell the new clients which version it supports"]
    pub protocolMajorVersion: ::core::ffi::c_int,
    pub protocolMinorVersion: ::core::ffi::c_int,
    #[doc = " command line authorization of file transfers"]
    pub permitFileTransfer: rfbBool,
    #[doc = " displayFinishedHook is called just after a frame buffer update"]
    pub displayFinishedHook: rfbDisplayFinishedHookPtr,
    #[doc = " xvpHook is called to handle an xvp client message"]
    pub xvpHook: rfbXvpHookPtr,
    pub sslkeyfile: *mut ::core::ffi::c_char,
    pub sslcertfile: *mut ::core::ffi::c_char,
    #[doc = "< The port to listen on when using IPv6."]
    pub ipv6port: ::core::ffi::c_int,
    pub listen6Interface: *mut ::core::ffi::c_char,
    pub listen6Sock: ::core::ffi::c_int,
    pub http6Port: ::core::ffi::c_int,
    pub httpListen6Sock: ::core::ffi::c_int,
    #[doc = " hook to let client set resolution"]
    pub setDesktopSizeHook: rfbSetDesktopSizeHookPtr,
    #[doc = " Optional hooks to query ExtendedDesktopSize screen information.\n If not set it is assumed only one screen is present spanning entire fb"]
    pub numberOfExtDesktopScreensHook: rfbNumberOfExtDesktopScreensPtr,
    pub getExtDesktopScreenHook: rfbGetExtDesktopScreenPtr,
    #[doc = " This value between 0 and 1.0 defines which fraction of the maximum number\nof file descriptors LibVNCServer uses before denying new client connections.\nIt is set to 0.5 per default."]
    pub fdQuota: f32,
    pub listener_thread: pthread_t,
    pub pipe_notify_listener_thread: [::core::ffi::c_int; 2usize],
    pub setXCutTextUTF8: rfbSetXCutTextUTF8ProcPtr,
}
#[test]
fn bindgen_test_layout__rfbScreenInfo() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbScreenInfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbScreenInfo>(),
        984usize,
        concat!("Size of: ", stringify!(_rfbScreenInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbScreenInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbScreenInfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scaledScreenNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(scaledScreenNext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scaledScreenRefCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(scaledScreenRefCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).paddedWidthInBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(paddedWidthInBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitsPerPixel) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(bitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sizeInBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(sizeInBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blackPixel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(blackPixel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).whitePixel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(whitePixel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).screenData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(screenData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).serverFormat) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(serverFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).colourMap) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(colourMap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desktopName) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(desktopName)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thisHost) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(thisHost)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).autoPort) as usize - ptr as usize },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(autoPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listenSock) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(listenSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxSock) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(maxSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxFd) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(maxFd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).allFds) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(allFds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).socketState) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(socketState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inetdSock) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(inetdSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inetdInitDone) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(inetdInitDone)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).udpPort) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(udpPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).udpSock) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(udpSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).udpClient) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(udpClient)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).udpSockConnected) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(udpSockConnected)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).udpRemoteAddr) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(udpRemoteAddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxClientWait) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(maxClientWait)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpInitDone) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpInitDone)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpEnableProxyConnect) as usize - ptr as usize },
        553usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpEnableProxyConnect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpPort) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpDir) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpDir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpListenSock) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpListenSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpSock) as usize - ptr as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).passwordCheck) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(passwordCheck)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).authPasswdData) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(authPasswdData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).authPasswdFirstViewOnly) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(authPasswdFirstViewOnly)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxRectsPerUpdate) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(maxRectsPerUpdate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deferUpdateTime) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(deferUpdateTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alwaysShared) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(alwaysShared)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).neverShared) as usize - ptr as usize },
        605usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(neverShared)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dontDisconnect) as usize - ptr as usize },
        606usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(dontDisconnect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clientHead) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(clientHead)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pointerClient) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(pointerClient)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorX) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(cursorX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorY) as usize - ptr as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(cursorY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).underCursorBufferLen) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(underCursorBufferLen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).underCursorBuffer) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(underCursorBuffer)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).dontConvertRichCursorToXCursor) as usize - ptr as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(dontConvertRichCursorToXCursor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).frameBuffer) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(frameBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kbdAddEvent) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(kbdAddEvent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kbdReleaseAllKeys) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(kbdReleaseAllKeys)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ptrAddEvent) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(ptrAddEvent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setXCutText) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setXCutText)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCursorPtr) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(getCursorPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTranslateFunction) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setTranslateFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSingleWindow) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setSingleWindow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setServerInput) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setServerInput)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFileTransferPermission) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(getFileTransferPermission)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTextChat) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setTextChat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newClientHook) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(newClientHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).displayHook) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(displayHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getKeyboardLedStateHook) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(getKeyboardLedStateHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorMutex) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(cursorMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backgroundLoop) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(backgroundLoop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ignoreSIGPIPE) as usize - ptr as usize },
        817usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(ignoreSIGPIPE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).progressiveSliceHeight) as usize - ptr as usize },
        820usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(progressiveSliceHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listenInterface) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(listenInterface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deferPtrUpdateTime) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(deferPtrUpdateTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handleEventsEagerly) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(handleEventsEagerly)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).versionString) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(versionString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).protocolMajorVersion) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(protocolMajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).protocolMinorVersion) as usize - ptr as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(protocolMinorVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).permitFileTransfer) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(permitFileTransfer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).displayFinishedHook) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(displayFinishedHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xvpHook) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(xvpHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sslkeyfile) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(sslkeyfile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sslcertfile) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(sslcertfile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipv6port) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(ipv6port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listen6Interface) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(listen6Interface)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listen6Sock) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(listen6Sock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).http6Port) as usize - ptr as usize },
        916usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(http6Port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).httpListen6Sock) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(httpListen6Sock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDesktopSizeHook) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setDesktopSizeHook)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).numberOfExtDesktopScreensHook) as usize - ptr as usize
        },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(numberOfExtDesktopScreensHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getExtDesktopScreenHook) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(getExtDesktopScreenHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fdQuota) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(fdQuota)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listener_thread) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(listener_thread)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).pipe_notify_listener_thread) as usize - ptr as usize
        },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(pipe_notify_listener_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setXCutTextUTF8) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbScreenInfo),
            "::",
            stringify!(setXCutTextUTF8)
        )
    );
}
#[doc = " Per-screen (framebuffer) structure.  There can be as many as you wish,\n each serving different clients. However, you have to call\n rfbProcessEvents for each of these."]
pub type rfbScreenInfo = _rfbScreenInfo;
#[doc = " Per-screen (framebuffer) structure.  There can be as many as you wish,\n each serving different clients. However, you have to call\n rfbProcessEvents for each of these."]
pub type rfbScreenInfoPtr = *mut _rfbScreenInfo;
#[doc = " rfbTranslateFnType is the type of translation functions."]
pub type rfbTranslateFnType = ::core::option::Option<
    unsafe extern "C" fn(
        table: *mut ::core::ffi::c_char,
        in_: *mut rfbPixelFormat,
        out: *mut rfbPixelFormat,
        iptr: *mut ::core::ffi::c_char,
        optr: *mut ::core::ffi::c_char,
        bytesBetweenInputLines: ::core::ffi::c_int,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sraRegion {
    _unused: [u8; 0],
}
pub type sraRegionPtr = *mut sraRegion;
pub type ClientGoneHookPtr = ::core::option::Option<unsafe extern "C" fn(cl: *mut _rfbClientRec)>;
pub type ClientFramebufferUpdateRequestHookPtr = ::core::option::Option<
    unsafe extern "C" fn(cl: *mut _rfbClientRec, furMsg: *mut rfbFramebufferUpdateRequestMsg),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbFileTransferData {
    pub fd: ::core::ffi::c_int,
    pub compressionEnabled: ::core::ffi::c_int,
    pub fileSize: ::core::ffi::c_int,
    pub numPackets: ::core::ffi::c_int,
    pub receiving: ::core::ffi::c_int,
    pub sending: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout__rfbFileTransferData() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbFileTransferData> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbFileTransferData>(),
        24usize,
        concat!("Size of: ", stringify!(_rfbFileTransferData))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbFileTransferData>(),
        4usize,
        concat!("Alignment of ", stringify!(_rfbFileTransferData))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferData),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).compressionEnabled) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferData),
            "::",
            stringify!(compressionEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fileSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferData),
            "::",
            stringify!(fileSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numPackets) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferData),
            "::",
            stringify!(numPackets)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).receiving) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferData),
            "::",
            stringify!(receiving)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sending) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbFileTransferData),
            "::",
            stringify!(sending)
        )
    );
}
pub type rfbFileTransferData = _rfbFileTransferData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbStatList {
    pub type_: u32,
    pub sentCount: u32,
    pub bytesSent: u32,
    pub bytesSentIfRaw: u32,
    pub rcvdCount: u32,
    pub bytesRcvd: u32,
    pub bytesRcvdIfRaw: u32,
    pub Next: *mut _rfbStatList,
}
#[test]
fn bindgen_test_layout__rfbStatList() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbStatList> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbStatList>(),
        40usize,
        concat!("Size of: ", stringify!(_rfbStatList))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbStatList>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbStatList))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sentCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(sentCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytesSent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(bytesSent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytesSentIfRaw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(bytesSentIfRaw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rcvdCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(rcvdCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytesRcvd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(bytesRcvd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytesRcvdIfRaw) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(bytesRcvdIfRaw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbStatList),
            "::",
            stringify!(Next)
        )
    );
}
pub type rfbStatList = _rfbStatList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbSslCtx {
    _unused: [u8; 0],
}
pub type rfbSslCtx = _rfbSslCtx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wsCtx {
    _unused: [u8; 0],
}
pub type wsCtx = _wsCtx;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _rfbClientRec {
    #[doc = " back pointer to the screen"]
    pub screen: rfbScreenInfoPtr,
    #[doc = " points to a scaled version of the screen buffer in cl->scaledScreenList"]
    pub scaledScreen: rfbScreenInfoPtr,
    #[doc = " how did the client tell us it wanted the screen changed?  Ultra style or palm style?"]
    pub PalmVNC: rfbBool,
    #[doc = " private data. You should put any application client specific data\n into a struct and let clientData point to it. Don't forget to\n free the struct via clientGoneHook!\n\n This is useful if the IO functions have to behave client specific."]
    pub clientData: *mut ::core::ffi::c_void,
    pub clientGoneHook: ClientGoneHookPtr,
    pub sock: ::core::ffi::c_int,
    pub host: *mut ::core::ffi::c_char,
    pub protocolMajorVersion: ::core::ffi::c_int,
    pub protocolMinorVersion: ::core::ffi::c_int,
    pub client_thread: pthread_t,
    pub state: _rfbClientRec__bindgen_ty_1,
    pub reverseConnection: rfbBool,
    pub onHold: rfbBool,
    pub readyForSetColourMapEntries: rfbBool,
    pub useCopyRect: rfbBool,
    pub preferredEncoding: ::core::ffi::c_int,
    pub correMaxWidth: ::core::ffi::c_int,
    pub correMaxHeight: ::core::ffi::c_int,
    pub viewOnly: rfbBool,
    pub authChallenge: [u8; 16usize],
    #[doc = "< the destination region of the copy"]
    pub copyRegion: sraRegionPtr,
    #[doc = "< the translation by which the copy happens"]
    pub copyDX: ::core::ffi::c_int,
    #[doc = "< the translation by which the copy happens"]
    pub copyDY: ::core::ffi::c_int,
    pub modifiedRegion: sraRegionPtr,
    #[doc = " As part of the FramebufferUpdateRequest, a client can express interest\nin a subrectangle of the whole framebuffer.  This is stored in the\nrequestedRegion member.  In the normal case this is the whole\nframebuffer if the client is ready, empty if it's not."]
    pub requestedRegion: sraRegionPtr,
    #[doc = " The following member represents the state of the \"deferred update\" timer\n- when the framebuffer is modified and the client is ready, in most\ncases it is more efficient to defer sending the update by a few\nmilliseconds so that several changes to the framebuffer can be combined\ninto a single update."]
    pub startDeferring: timeval,
    pub startPtrDeferring: timeval,
    pub lastPtrX: ::core::ffi::c_int,
    pub lastPtrY: ::core::ffi::c_int,
    pub lastPtrButtons: ::core::ffi::c_int,
    #[doc = " translateFn points to the translation function which is used to copy\nand translate a rectangle from the framebuffer to an output buffer."]
    pub translateFn: rfbTranslateFnType,
    pub translateLookupTable: *mut ::core::ffi::c_char,
    pub format: rfbPixelFormat,
    pub updateBuf: [::core::ffi::c_char; 32768usize],
    pub ublen: ::core::ffi::c_int,
    pub statEncList: *mut _rfbStatList,
    pub statMsgList: *mut _rfbStatList,
    pub rawBytesEquivalent: ::core::ffi::c_int,
    pub bytesSent: ::core::ffi::c_int,
    pub compStream: z_stream_s,
    pub compStreamInited: rfbBool,
    pub zlibCompressLevel: u32,
    #[doc = " the quality level is also used by ZYWRLE and TightPng"]
    pub tightQualityLevel: ::core::ffi::c_int,
    pub zsStruct: [z_stream; 4usize],
    pub zsActive: [rfbBool; 4usize],
    pub zsLevel: [::core::ffi::c_int; 4usize],
    pub tightCompressLevel: ::core::ffi::c_int,
    pub compStreamInitedLZO: rfbBool,
    pub lzoWrkMem: *mut ::core::ffi::c_char,
    pub fileTransfer: rfbFileTransferData,
    #[doc = "< keep track of last value so we can send *change* events"]
    pub lastKeyboardLedState: ::core::ffi::c_int,
    #[doc = "< client supports SupportedMessages encoding"]
    pub enableSupportedMessages: rfbBool,
    #[doc = "< client supports SupportedEncodings encoding"]
    pub enableSupportedEncodings: rfbBool,
    #[doc = "< client supports ServerIdentity encoding"]
    pub enableServerIdentity: rfbBool,
    #[doc = "< client supports KeyboardState encoding"]
    pub enableKeyboardLedState: rfbBool,
    #[doc = "< client supports LastRect encoding"]
    pub enableLastRectEncoding: rfbBool,
    #[doc = "< client supports cursor shape updates"]
    pub enableCursorShapeUpdates: rfbBool,
    #[doc = "< client supports cursor position updates"]
    pub enableCursorPosUpdates: rfbBool,
    #[doc = "< rfbEncodingRichCursor is preferred"]
    pub useRichCursorEncoding: rfbBool,
    #[doc = "< cursor shape update should be sent"]
    pub cursorWasChanged: rfbBool,
    #[doc = "< cursor position update should be sent"]
    pub cursorWasMoved: rfbBool,
    #[doc = "< the coordinates of the cursor,\nif enableCursorShapeUpdates = FALSE"]
    pub cursorX: ::core::ffi::c_int,
    #[doc = "< the coordinates of the cursor,\nif enableCursorShapeUpdates = FALSE"]
    pub cursorY: ::core::ffi::c_int,
    #[doc = "< client supports NewFBSize encoding"]
    pub useNewFBSize: rfbBool,
    #[doc = "< framebuffer size was changed"]
    pub newFBSizePending: rfbBool,
    pub prev: *mut _rfbClientRec,
    pub next: *mut _rfbClientRec,
    #[doc = " whenever a client is referenced, the refCount has to be incremented\nand afterwards decremented, so that the client is not cleaned up\nwhile being referenced.\nUse the functions rfbIncrClientRef(cl) and rfbDecrClientRef(cl);"]
    pub refCount: ::core::ffi::c_int,
    pub refCountMutex: pthread_mutex_t,
    pub deleteCond: pthread_cond_t,
    pub outputMutex: pthread_mutex_t,
    pub updateMutex: pthread_mutex_t,
    pub updateCond: pthread_cond_t,
    pub zrleData: *mut ::core::ffi::c_void,
    pub zywrleLevel: ::core::ffi::c_int,
    pub zywrleBuf: [::core::ffi::c_int; 4096usize],
    #[doc = " if progressive updating is on, this variable holds the current\n y coordinate of the progressive slice."]
    pub progressiveSliceY: ::core::ffi::c_int,
    pub extensions: *mut rfbExtensionData,
    #[doc = " for threaded zrle"]
    pub zrleBeforeBuf: *mut ::core::ffi::c_char,
    pub paletteHelper: *mut ::core::ffi::c_void,
    pub sendMutex: pthread_mutex_t,
    pub beforeEncBuf: *mut ::core::ffi::c_char,
    pub beforeEncBufSize: ::core::ffi::c_int,
    pub afterEncBuf: *mut ::core::ffi::c_char,
    pub afterEncBufSize: ::core::ffi::c_int,
    pub afterEncBufLen: ::core::ffi::c_int,
    pub tightEncoding: u32,
    pub turboSubsampLevel: ::core::ffi::c_int,
    pub turboQualityLevel: ::core::ffi::c_int,
    pub sslctx: *mut rfbSslCtx,
    pub wsctx: *mut wsCtx,
    pub wspath: *mut ::core::ffi::c_char,
    pub pipe_notify_client_thread: [::core::ffi::c_int; 2usize],
    #[doc = " clientFramebufferUpdateRequestHook is called when a client requests a frame\n buffer update."]
    pub clientFramebufferUpdateRequestHook: ClientFramebufferUpdateRequestHookPtr,
    pub useExtDesktopSize: rfbBool,
    pub requestedDesktopSizeChange: ::core::ffi::c_int,
    pub lastDesktopSizeChangeError: ::core::ffi::c_int,
    pub enableExtendedClipboard: rfbBool,
    pub extClipboardUserCap: u32,
    pub extClipboardMaxUnsolicitedSize: u32,
    pub extClipboardData: *mut ::core::ffi::c_char,
    pub extClipboardDataSize: ::core::ffi::c_int,
    pub tightUsePixelFormat24: rfbBool,
    pub tightTJ: *mut ::core::ffi::c_void,
    pub tightPngDstDataLen: ::core::ffi::c_int,
}
#[doc = "< establishing protocol version"]
pub const _rfbClientRec_RFB_PROTOCOL_VERSION: _rfbClientRec__bindgen_ty_1 = 0;
#[doc = "< negotiating security (RFB v.3.7)"]
pub const _rfbClientRec_RFB_SECURITY_TYPE: _rfbClientRec__bindgen_ty_1 = 1;
#[doc = "< authenticating"]
pub const _rfbClientRec_RFB_AUTHENTICATION: _rfbClientRec__bindgen_ty_1 = 2;
#[doc = "< sending initialisation messages"]
pub const _rfbClientRec_RFB_INITIALISATION: _rfbClientRec__bindgen_ty_1 = 3;
#[doc = "< normal protocol messages"]
pub const _rfbClientRec_RFB_NORMAL: _rfbClientRec__bindgen_ty_1 = 4;
#[doc = "< sending initialisation messages with implicit shared-flag already true"]
pub const _rfbClientRec_RFB_INITIALISATION_SHARED: _rfbClientRec__bindgen_ty_1 = 5;
#[doc = "< Client is shutting down"]
pub const _rfbClientRec_RFB_SHUTDOWN: _rfbClientRec__bindgen_ty_1 = 6;
#[doc = " Possible client states:"]
pub type _rfbClientRec__bindgen_ty_1 = ::core::ffi::c_uint;
#[test]
fn bindgen_test_layout__rfbClientRec() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbClientRec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbClientRec>(),
        50544usize,
        concat!("Size of: ", stringify!(_rfbClientRec))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbClientRec>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbClientRec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).screen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(screen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scaledScreen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(scaledScreen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PalmVNC) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(PalmVNC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clientData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(clientData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clientGoneHook) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(clientGoneHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sock) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).protocolMajorVersion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(protocolMajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).protocolMinorVersion) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(protocolMinorVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).client_thread) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(client_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reverseConnection) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(reverseConnection)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).onHold) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(onHold)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).readyForSetColourMapEntries) as usize - ptr as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(readyForSetColourMapEntries)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useCopyRect) as usize - ptr as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(useCopyRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).preferredEncoding) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(preferredEncoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).correMaxWidth) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(correMaxWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).correMaxHeight) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(correMaxHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).viewOnly) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(viewOnly)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).authChallenge) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(authChallenge)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copyRegion) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(copyRegion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copyDX) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(copyDX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copyDY) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(copyDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).modifiedRegion) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(modifiedRegion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).requestedRegion) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(requestedRegion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).startDeferring) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(startDeferring)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).startPtrDeferring) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(startPtrDeferring)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastPtrX) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(lastPtrX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastPtrY) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(lastPtrY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastPtrButtons) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(lastPtrButtons)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).translateFn) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(translateFn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).translateLookupTable) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(translateLookupTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).updateBuf) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(updateBuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ublen) as usize - ptr as usize },
        32992usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(ublen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).statEncList) as usize - ptr as usize },
        33000usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(statEncList)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).statMsgList) as usize - ptr as usize },
        33008usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(statMsgList)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rawBytesEquivalent) as usize - ptr as usize },
        33016usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(rawBytesEquivalent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytesSent) as usize - ptr as usize },
        33020usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(bytesSent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).compStream) as usize - ptr as usize },
        33024usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(compStream)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).compStreamInited) as usize - ptr as usize },
        33136usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(compStreamInited)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zlibCompressLevel) as usize - ptr as usize },
        33140usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zlibCompressLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightQualityLevel) as usize - ptr as usize },
        33144usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(tightQualityLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zsStruct) as usize - ptr as usize },
        33152usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zsStruct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zsActive) as usize - ptr as usize },
        33600usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zsActive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zsLevel) as usize - ptr as usize },
        33604usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zsLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightCompressLevel) as usize - ptr as usize },
        33620usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(tightCompressLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).compStreamInitedLZO) as usize - ptr as usize },
        33624usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(compStreamInitedLZO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lzoWrkMem) as usize - ptr as usize },
        33632usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(lzoWrkMem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fileTransfer) as usize - ptr as usize },
        33640usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(fileTransfer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastKeyboardLedState) as usize - ptr as usize },
        33664usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(lastKeyboardLedState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableSupportedMessages) as usize - ptr as usize },
        33668usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableSupportedMessages)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableSupportedEncodings) as usize - ptr as usize },
        33669usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableSupportedEncodings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableServerIdentity) as usize - ptr as usize },
        33670usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableServerIdentity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableKeyboardLedState) as usize - ptr as usize },
        33671usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableKeyboardLedState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableLastRectEncoding) as usize - ptr as usize },
        33672usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableLastRectEncoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableCursorShapeUpdates) as usize - ptr as usize },
        33673usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableCursorShapeUpdates)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableCursorPosUpdates) as usize - ptr as usize },
        33674usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableCursorPosUpdates)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useRichCursorEncoding) as usize - ptr as usize },
        33675usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(useRichCursorEncoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorWasChanged) as usize - ptr as usize },
        33676usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(cursorWasChanged)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorWasMoved) as usize - ptr as usize },
        33677usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(cursorWasMoved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorX) as usize - ptr as usize },
        33680usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(cursorX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cursorY) as usize - ptr as usize },
        33684usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(cursorY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useNewFBSize) as usize - ptr as usize },
        33688usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(useNewFBSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newFBSizePending) as usize - ptr as usize },
        33689usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(newFBSizePending)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        33696usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        33704usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).refCount) as usize - ptr as usize },
        33712usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).refCountMutex) as usize - ptr as usize },
        33720usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(refCountMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).deleteCond) as usize - ptr as usize },
        33760usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(deleteCond)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).outputMutex) as usize - ptr as usize },
        33808usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(outputMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).updateMutex) as usize - ptr as usize },
        33848usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(updateMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).updateCond) as usize - ptr as usize },
        33888usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(updateCond)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zrleData) as usize - ptr as usize },
        33936usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zrleData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zywrleLevel) as usize - ptr as usize },
        33944usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zywrleLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zywrleBuf) as usize - ptr as usize },
        33948usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zywrleBuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).progressiveSliceY) as usize - ptr as usize },
        50332usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(progressiveSliceY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        50336usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zrleBeforeBuf) as usize - ptr as usize },
        50344usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(zrleBeforeBuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).paletteHelper) as usize - ptr as usize },
        50352usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(paletteHelper)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sendMutex) as usize - ptr as usize },
        50360usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(sendMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).beforeEncBuf) as usize - ptr as usize },
        50400usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(beforeEncBuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).beforeEncBufSize) as usize - ptr as usize },
        50408usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(beforeEncBufSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).afterEncBuf) as usize - ptr as usize },
        50416usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(afterEncBuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).afterEncBufSize) as usize - ptr as usize },
        50424usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(afterEncBufSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).afterEncBufLen) as usize - ptr as usize },
        50428usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(afterEncBufLen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightEncoding) as usize - ptr as usize },
        50432usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(tightEncoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).turboSubsampLevel) as usize - ptr as usize },
        50436usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(turboSubsampLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).turboQualityLevel) as usize - ptr as usize },
        50440usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(turboQualityLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sslctx) as usize - ptr as usize },
        50448usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(sslctx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wsctx) as usize - ptr as usize },
        50456usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(wsctx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wspath) as usize - ptr as usize },
        50464usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(wspath)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pipe_notify_client_thread) as usize - ptr as usize },
        50472usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(pipe_notify_client_thread)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).clientFramebufferUpdateRequestHook) as usize - ptr as usize
        },
        50480usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(clientFramebufferUpdateRequestHook)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useExtDesktopSize) as usize - ptr as usize },
        50488usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(useExtDesktopSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).requestedDesktopSizeChange) as usize - ptr as usize },
        50492usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(requestedDesktopSizeChange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastDesktopSizeChangeError) as usize - ptr as usize },
        50496usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(lastDesktopSizeChangeError)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableExtendedClipboard) as usize - ptr as usize },
        50500usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(enableExtendedClipboard)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extClipboardUserCap) as usize - ptr as usize },
        50504usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(extClipboardUserCap)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).extClipboardMaxUnsolicitedSize) as usize - ptr as usize
        },
        50508usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(extClipboardMaxUnsolicitedSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extClipboardData) as usize - ptr as usize },
        50512usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(extClipboardData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extClipboardDataSize) as usize - ptr as usize },
        50520usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(extClipboardDataSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightUsePixelFormat24) as usize - ptr as usize },
        50524usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(tightUsePixelFormat24)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightTJ) as usize - ptr as usize },
        50528usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(tightTJ)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightPngDstDataLen) as usize - ptr as usize },
        50536usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientRec),
            "::",
            stringify!(tightPngDstDataLen)
        )
    );
}
pub type rfbClientRec = _rfbClientRec;
pub type rfbClientPtr = *mut _rfbClientRec;
extern "C" {
    pub static mut rfbEndianTest: ::core::ffi::c_char;
}
extern "C" {
    pub static mut rfbMaxClientWait: ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbInitSockets(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbShutdownSockets(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbDisconnectUDPSock(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbCloseClient(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbReadExact(
        cl: rfbClientPtr,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbReadExactTimeout(
        cl: rfbClientPtr,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        timeout: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbPeekExactTimeout(
        cl: rfbClientPtr,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        timeout: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbWriteExact(
        cl: rfbClientPtr,
        buf: *const ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbCheckFds(
        rfbScreen: rfbScreenInfoPtr,
        usec: ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbConnect(
        rfbScreen: rfbScreenInfoPtr,
        host: *mut ::core::ffi::c_char,
        port: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbConnectToTcpAddr(
        host: *mut ::core::ffi::c_char,
        port: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbListenOnTCPPort(port: ::core::ffi::c_int, iface: in_addr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbListenOnTCP6Port(
        port: ::core::ffi::c_int,
        iface: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbListenOnUDPPort(port: ::core::ffi::c_int, iface: in_addr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStringToAddr(
        string: *mut ::core::ffi::c_char,
        addr: *mut in_addr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbSetNonBlocking(sock: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    pub fn webSocketsCheck(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn webSocketCheckDisconnect(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn webSocketsEncode(
        cl: rfbClientPtr,
        src: *const ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        dst: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn webSocketsDecode(
        cl: rfbClientPtr,
        dst: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn webSocketsHasDataInBuffer(cl: rfbClientPtr) -> rfbBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbClientIterator {
    _unused: [u8; 0],
}
pub type rfbClientIteratorPtr = *mut rfbClientIterator;
extern "C" {
    pub fn rfbClientListInit(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbGetClientIterator(rfbScreen: rfbScreenInfoPtr) -> rfbClientIteratorPtr;
}
extern "C" {
    pub fn rfbClientIteratorNext(iterator: rfbClientIteratorPtr) -> rfbClientPtr;
}
extern "C" {
    pub fn rfbReleaseClientIterator(iterator: rfbClientIteratorPtr);
}
extern "C" {
    pub fn rfbIncrClientRef(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbDecrClientRef(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbNewClientConnection(rfbScreen: rfbScreenInfoPtr, sock: ::core::ffi::c_int);
}
extern "C" {
    pub fn rfbNewClient(rfbScreen: rfbScreenInfoPtr, sock: ::core::ffi::c_int) -> rfbClientPtr;
}
extern "C" {
    pub fn rfbNewUDPClient(rfbScreen: rfbScreenInfoPtr) -> rfbClientPtr;
}
extern "C" {
    pub fn rfbReverseConnection(
        rfbScreen: rfbScreenInfoPtr,
        host: *mut ::core::ffi::c_char,
        port: ::core::ffi::c_int,
    ) -> rfbClientPtr;
}
extern "C" {
    pub fn rfbClientConnectionGone(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbProcessClientMessage(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbClientConnFailed(cl: rfbClientPtr, reason: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn rfbNewUDPConnection(rfbScreen: rfbScreenInfoPtr, sock: ::core::ffi::c_int);
}
extern "C" {
    pub fn rfbProcessUDPInput(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbSendFramebufferUpdate(cl: rfbClientPtr, updateRegion: sraRegionPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbSendRectEncodingRaw(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendUpdateBuf(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbSendServerCutText(
        rfbScreen: rfbScreenInfoPtr,
        str_: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbSendServerCutTextUTF8(
        rfbScreen: rfbScreenInfoPtr,
        str_: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
        fallbackLatin1Str: *mut ::core::ffi::c_char,
        latin1Len: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbSendCopyRegion(
        cl: rfbClientPtr,
        reg: sraRegionPtr,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendLastRectMarker(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbSendNewFBSize(
        cl: rfbClientPtr,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendExtDesktopSize(
        cl: rfbClientPtr,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendSetColourMapEntries(
        cl: rfbClientPtr,
        firstColour: ::core::ffi::c_int,
        nColours: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendBell(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbProcessFileTransferReadBuffer(
        cl: rfbClientPtr,
        length: u32,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rfbSendFileTransferChunk(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbSendDirContent(
        cl: rfbClientPtr,
        length: ::core::ffi::c_int,
        buffer: *mut ::core::ffi::c_char,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendFileTransferMessage(
        cl: rfbClientPtr,
        contentType: u8,
        contentParam: u8,
        size: u32,
        length: u32,
        buffer: *const ::core::ffi::c_char,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbProcessFileTransfer(
        cl: rfbClientPtr,
        contentType: u8,
        contentParam: u8,
        size: u32,
        length: u32,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbGotXCutText(
        rfbScreen: rfbScreenInfoPtr,
        str_: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    );
}
extern "C" {
    pub static mut rfbEconomicTranslate: rfbBool;
}
extern "C" {
    pub fn rfbTranslateNone(
        table: *mut ::core::ffi::c_char,
        in_: *mut rfbPixelFormat,
        out: *mut rfbPixelFormat,
        iptr: *mut ::core::ffi::c_char,
        optr: *mut ::core::ffi::c_char,
        bytesBetweenInputLines: ::core::ffi::c_int,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbSetTranslateFunction(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbSetClientColourMap(
        cl: rfbClientPtr,
        firstColour: ::core::ffi::c_int,
        nColours: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSetClientColourMaps(
        rfbScreen: rfbScreenInfoPtr,
        firstColour: ::core::ffi::c_int,
        nColours: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbHttpInitSockets(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbHttpShutdownSockets(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbHttpCheckFds(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbAuthNewClient(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbProcessClientSecurityType(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbAuthProcessClientMessage(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbRegisterSecurityHandler(handler: *mut rfbSecurityHandler);
}
extern "C" {
    pub fn rfbUnregisterSecurityHandler(handler: *mut rfbSecurityHandler);
}
extern "C" {
    pub fn rfbSendRectEncodingRRE(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendRectEncodingCoRRE(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendRectEncodingHextile(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendRectEncodingUltra(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendRectEncodingZlib(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbNumCodedRectsTight(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbSendRectEncodingTight(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendTightHeader(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendCompressedDataTight(
        cl: rfbClientPtr,
        buf: *mut ::core::ffi::c_char,
        compressedLen: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbSendRectEncodingTightPng(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbCursor {
    #[doc = " set this to true if LibVNCServer has to free this cursor"]
    pub cleanup: rfbBool,
    #[doc = " set this to true if LibVNCServer has to free this cursor"]
    pub cleanupSource: rfbBool,
    #[doc = " set this to true if LibVNCServer has to free this cursor"]
    pub cleanupMask: rfbBool,
    #[doc = " set this to true if LibVNCServer has to free this cursor"]
    pub cleanupRichSource: rfbBool,
    #[doc = "< points to bits"]
    pub source: *mut ::core::ffi::c_uchar,
    #[doc = "< points to bits"]
    pub mask: *mut ::core::ffi::c_uchar,
    #[doc = "< metrics"]
    pub width: ::core::ffi::c_ushort,
    #[doc = "< metrics"]
    pub height: ::core::ffi::c_ushort,
    #[doc = "< metrics"]
    pub xhot: ::core::ffi::c_ushort,
    #[doc = "< metrics"]
    pub yhot: ::core::ffi::c_ushort,
    #[doc = "< device-independent colour"]
    pub foreRed: ::core::ffi::c_ushort,
    #[doc = "< device-independent colour"]
    pub foreGreen: ::core::ffi::c_ushort,
    #[doc = "< device-independent colour"]
    pub foreBlue: ::core::ffi::c_ushort,
    #[doc = "< device-independent colour"]
    pub backRed: ::core::ffi::c_ushort,
    #[doc = "< device-independent colour"]
    pub backGreen: ::core::ffi::c_ushort,
    #[doc = "< device-independent colour"]
    pub backBlue: ::core::ffi::c_ushort,
    #[doc = "< source bytes for a rich cursor"]
    pub richSource: *mut ::core::ffi::c_uchar,
    #[doc = "< source for alpha blending info"]
    pub alphaSource: *mut ::core::ffi::c_uchar,
    #[doc = "< if richSource already has alpha applied"]
    pub alphaPreMultiplied: rfbBool,
}
#[test]
fn bindgen_test_layout_rfbCursor() {
    const UNINIT: ::core::mem::MaybeUninit<rfbCursor> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbCursor>(),
        72usize,
        concat!("Size of: ", stringify!(rfbCursor))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbCursor>(),
        8usize,
        concat!("Alignment of ", stringify!(rfbCursor))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleanupSource) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(cleanupSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleanupMask) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(cleanupMask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleanupRichSource) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(cleanupRichSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xhot) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(xhot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).yhot) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(yhot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).foreRed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(foreRed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).foreGreen) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(foreGreen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).foreBlue) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(foreBlue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backRed) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(backRed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backGreen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(backGreen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).backBlue) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(backBlue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).richSource) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(richSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alphaSource) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(alphaSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alphaPreMultiplied) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbCursor),
            "::",
            stringify!(alphaPreMultiplied)
        )
    );
}
pub type rfbCursorPtr = *mut rfbCursor;
extern "C" {
    pub static mut rfbReverseByte: [::core::ffi::c_uchar; 256usize];
}
extern "C" {
    pub fn rfbSendCursorShape(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbSendCursorPos(cl: rfbClientPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbConvertLSBCursorBitmapOrMask(
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        bitmap: *mut ::core::ffi::c_uchar,
    );
}
extern "C" {
    pub fn rfbMakeXCursor(
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        cursorString: *mut ::core::ffi::c_char,
        maskString: *mut ::core::ffi::c_char,
    ) -> rfbCursorPtr;
}
extern "C" {
    pub fn rfbMakeMaskForXCursor(
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        cursorString: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rfbMakeMaskFromAlphaSource(
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        alphaSource: *mut ::core::ffi::c_uchar,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rfbMakeXCursorFromRichCursor(rfbScreen: rfbScreenInfoPtr, cursor: rfbCursorPtr);
}
extern "C" {
    pub fn rfbMakeRichCursorFromXCursor(rfbScreen: rfbScreenInfoPtr, cursor: rfbCursorPtr);
}
extern "C" {
    pub fn rfbFreeCursor(cursor: rfbCursorPtr);
}
extern "C" {
    pub fn rfbSetCursor(rfbScreen: rfbScreenInfoPtr, c: rfbCursorPtr);
}
extern "C" {
    #[doc = " cursor handling for the pointer"]
    pub fn rfbDefaultPtrAddEvent(
        buttonMask: ::core::ffi::c_int,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        cl: rfbClientPtr,
    );
}
extern "C" {
    pub fn rfbSendRectEncodingZRLE(
        cl: rfbClientPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbResetStats(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbPrintStats(cl: rfbClientPtr);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbFontData {
    pub data: *mut ::core::ffi::c_uchar,
    #[doc = "metaData is a 256*5 array:\nfor each character\n(offset,width,height,x,y)"]
    pub metaData: *mut ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_rfbFontData() {
    const UNINIT: ::core::mem::MaybeUninit<rfbFontData> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbFontData>(),
        16usize,
        concat!("Size of: ", stringify!(rfbFontData))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbFontData>(),
        8usize,
        concat!("Alignment of ", stringify!(rfbFontData))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFontData),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metaData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbFontData),
            "::",
            stringify!(metaData)
        )
    );
}
pub type rfbFontDataPtr = *mut rfbFontData;
extern "C" {
    pub fn rfbDrawChar(
        rfbScreen: rfbScreenInfoPtr,
        font: rfbFontDataPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        c: ::core::ffi::c_uchar,
        colour: rfbPixel,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbDrawString(
        rfbScreen: rfbScreenInfoPtr,
        font: rfbFontDataPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        string: *const ::core::ffi::c_char,
        colour: rfbPixel,
    );
}
extern "C" {
    #[doc = " if colour==backColour, background is transparent"]
    pub fn rfbDrawCharWithClip(
        rfbScreen: rfbScreenInfoPtr,
        font: rfbFontDataPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        c: ::core::ffi::c_uchar,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        colour: rfbPixel,
        backColour: rfbPixel,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbDrawStringWithClip(
        rfbScreen: rfbScreenInfoPtr,
        font: rfbFontDataPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        string: *const ::core::ffi::c_char,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        colour: rfbPixel,
        backColour: rfbPixel,
    );
}
extern "C" {
    pub fn rfbWidthOfString(
        font: rfbFontDataPtr,
        string: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbWidthOfChar(font: rfbFontDataPtr, c: ::core::ffi::c_uchar) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbFontBBox(
        font: rfbFontDataPtr,
        c: ::core::ffi::c_uchar,
        x1: *mut ::core::ffi::c_int,
        y1: *mut ::core::ffi::c_int,
        x2: *mut ::core::ffi::c_int,
        y2: *mut ::core::ffi::c_int,
    );
}
extern "C" {
    #[doc = " this returns the smallest box enclosing any character of font."]
    pub fn rfbWholeFontBBox(
        font: rfbFontDataPtr,
        x1: *mut ::core::ffi::c_int,
        y1: *mut ::core::ffi::c_int,
        x2: *mut ::core::ffi::c_int,
        y2: *mut ::core::ffi::c_int,
    );
}
extern "C" {
    #[doc = " dynamically load a linux console font (4096 bytes, 256 glyphs a 8x16"]
    pub fn rfbLoadConsoleFont(filename: *mut ::core::ffi::c_char) -> rfbFontDataPtr;
}
extern "C" {
    #[doc = " free a dynamically loaded font"]
    pub fn rfbFreeFont(font: rfbFontDataPtr);
}
extern "C" {
    pub fn rfbFillRect(
        s: rfbScreenInfoPtr,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        col: rfbPixel,
    );
}
extern "C" {
    pub fn rfbDrawPixel(
        s: rfbScreenInfoPtr,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        col: rfbPixel,
    );
}
extern "C" {
    pub fn rfbDrawLine(
        s: rfbScreenInfoPtr,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        col: rfbPixel,
    );
}
#[doc = " this opens a modal select box. list is an array of strings, the end marked\nwith a NULL.\nIt returns the index in the list or -1 if cancelled or something else\nwasn't kosher."]
pub type SelectionChangedHookPtr =
    ::core::option::Option<unsafe extern "C" fn(_index: ::core::ffi::c_int)>;
extern "C" {
    pub fn rfbSelectBox(
        rfbScreen: rfbScreenInfoPtr,
        font: rfbFontDataPtr,
        list: *mut *mut ::core::ffi::c_char,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        foreColour: rfbPixel,
        backColour: rfbPixel,
        border: ::core::ffi::c_int,
        selChangedHook: SelectionChangedHookPtr,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbUsage();
}
extern "C" {
    pub fn rfbPurgeArguments(
        argc: *mut ::core::ffi::c_int,
        position: *mut ::core::ffi::c_int,
        count: ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn rfbProcessArguments(
        rfbScreen: rfbScreenInfoPtr,
        argc: *mut ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbProcessSizeArguments(
        width: *mut ::core::ffi::c_int,
        height: *mut ::core::ffi::c_int,
        bpp: *mut ::core::ffi::c_int,
        argc: *mut ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbLogEnable(enabled: ::core::ffi::c_int);
}
pub type rfbLogProc =
    ::core::option::Option<unsafe extern "C" fn(format: *const ::core::ffi::c_char, ...)>;
extern "C" {
    pub static mut rfbLog: rfbLogProc;
}
extern "C" {
    pub static mut rfbErr: rfbLogProc;
}
extern "C" {
    pub fn rfbLogPerror(str_: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn rfbScheduleCopyRect(
        rfbScreen: rfbScreenInfoPtr,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbScheduleCopyRegion(
        rfbScreen: rfbScreenInfoPtr,
        copyRegion: sraRegionPtr,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbDoCopyRect(
        rfbScreen: rfbScreenInfoPtr,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbDoCopyRegion(
        rfbScreen: rfbScreenInfoPtr,
        copyRegion: sraRegionPtr,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbMarkRectAsModified(
        rfbScreen: rfbScreenInfoPtr,
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbMarkRegionAsModified(rfbScreen: rfbScreenInfoPtr, modRegion: sraRegionPtr);
}
extern "C" {
    pub fn rfbDoNothingWithClient(cl: rfbClientPtr);
}
extern "C" {
    pub fn defaultNewClientHook(cl: rfbClientPtr) -> rfbNewClientAction;
}
extern "C" {
    pub fn rfbRegisterProtocolExtension(extension: *mut rfbProtocolExtension);
}
extern "C" {
    pub fn rfbUnregisterProtocolExtension(extension: *mut rfbProtocolExtension);
}
extern "C" {
    pub fn rfbGetExtensionIterator() -> *mut _rfbProtocolExtension;
}
extern "C" {
    pub fn rfbReleaseExtensionIterator();
}
extern "C" {
    pub fn rfbEnableExtension(
        cl: rfbClientPtr,
        extension: *mut rfbProtocolExtension,
        data: *mut ::core::ffi::c_void,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbDisableExtension(cl: rfbClientPtr, extension: *mut rfbProtocolExtension) -> rfbBool;
}
extern "C" {
    pub fn rfbGetExtensionClientData(
        cl: rfbClientPtr,
        extension: *mut rfbProtocolExtension,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " to check against plain passwords"]
    pub fn rfbCheckPasswordByList(
        cl: rfbClientPtr,
        response: *const ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbGetScreen(
        argc: *mut ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        bitsPerSample: ::core::ffi::c_int,
        samplesPerPixel: ::core::ffi::c_int,
        bytesPerPixel: ::core::ffi::c_int,
    ) -> rfbScreenInfoPtr;
}
extern "C" {
    pub fn rfbInitServerWithPthreadsAndZRLE(rfbScreen: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbShutdownServer(rfbScreen: rfbScreenInfoPtr, disconnectClients: rfbBool);
}
extern "C" {
    pub fn rfbNewFramebuffer(
        rfbScreen: rfbScreenInfoPtr,
        framebuffer: *mut ::core::ffi::c_char,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        bitsPerSample: ::core::ffi::c_int,
        samplesPerPixel: ::core::ffi::c_int,
        bytesPerPixel: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbScreenCleanup(screenInfo: rfbScreenInfoPtr);
}
extern "C" {
    pub fn rfbSetServerVersionIdentity(
        screen: rfbScreenInfoPtr,
        fmt: *mut ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn rfbStartOnHoldClient(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbRefuseOnHoldClient(cl: rfbClientPtr);
}
extern "C" {
    pub fn rfbRunEventLoop(
        screenInfo: rfbScreenInfoPtr,
        usec: ::core::ffi::c_long,
        runInBackground: rfbBool,
    );
}
extern "C" {
    pub fn rfbProcessEvents(screenInfo: rfbScreenInfoPtr, usec: ::core::ffi::c_long) -> rfbBool;
}
extern "C" {
    pub fn rfbIsActive(screenInfo: rfbScreenInfoPtr) -> rfbBool;
}
extern "C" {
    #[doc = " Register the TightVNC-1.3.x file transfer extension.\n NB That TightVNC-2.x uses a different, incompatible file transfer protocol."]
    pub fn rfbRegisterTightVNCFileTransferExtension();
}
extern "C" {
    #[doc = " Unregister the TightVNC-1.3.x file transfer extension.\n NB That TightVNC-2.x uses a different, incompatible file transfer protocol."]
    pub fn rfbUnregisterTightVNCFileTransferExtension();
}
extern "C" {
    pub fn messageNameServer2Client(
        type_: u32,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn messageNameClient2Server(
        type_: u32,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn encodingName(
        enc: u32,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rfbStatLookupEncoding(cl: rfbClientPtr, type_: u32) -> *mut rfbStatList;
}
extern "C" {
    pub fn rfbStatLookupMessage(cl: rfbClientPtr, type_: u32) -> *mut rfbStatList;
}
extern "C" {
    pub fn rfbStatRecordEncodingSent(
        cl: rfbClientPtr,
        type_: u32,
        byteCount: ::core::ffi::c_int,
        byteIfRaw: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbStatRecordEncodingSentAdd(
        cl: rfbClientPtr,
        type_: u32,
        byteCount: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbStatRecordEncodingRcvd(
        cl: rfbClientPtr,
        type_: u32,
        byteCount: ::core::ffi::c_int,
        byteIfRaw: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbStatRecordMessageSent(
        cl: rfbClientPtr,
        type_: u32,
        byteCount: ::core::ffi::c_int,
        byteIfRaw: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbStatRecordMessageRcvd(
        cl: rfbClientPtr,
        type_: u32,
        byteCount: ::core::ffi::c_int,
        byteIfRaw: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn rfbStatGetSentBytes(cl: rfbClientPtr) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetSentBytesIfRaw(cl: rfbClientPtr) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetRcvdBytes(cl: rfbClientPtr) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetRcvdBytesIfRaw(cl: rfbClientPtr) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetMessageCountSent(cl: rfbClientPtr, type_: u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetMessageCountRcvd(cl: rfbClientPtr, type_: u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetEncodingCountSent(cl: rfbClientPtr, type_: u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rfbStatGetEncodingCountRcvd(cl: rfbClientPtr, type_: u32) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Set which version you want to advertise 3.3, 3.6, 3.7 and 3.8 are currently supported"]
    pub fn rfbSetProtocolVersion(
        rfbScreen: rfbScreenInfoPtr,
        major_: ::core::ffi::c_int,
        minor_: ::core::ffi::c_int,
    );
}
extern "C" {
    #[doc = " send a TextChat message to a client"]
    pub fn rfbSendTextChatMessage(
        cl: rfbClientPtr,
        length: u32,
        buffer: *mut ::core::ffi::c_char,
    ) -> rfbBool;
}
extern "C" {
    pub fn rfbProcessNewConnection(rfbScreen: rfbScreenInfoPtr) -> rfbBool;
}
extern "C" {
    pub fn rfbUpdateClient(cl: rfbClientPtr) -> rfbBool;
}
#[doc = " vncrec"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbVNCRec {
    pub file: *mut FILE,
    pub tv: timeval,
    pub readTimestamp: rfbBool,
    pub doNotSleep: rfbBool,
}
#[test]
fn bindgen_test_layout_rfbVNCRec() {
    const UNINIT: ::core::mem::MaybeUninit<rfbVNCRec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbVNCRec>(),
        32usize,
        concat!("Size of: ", stringify!(rfbVNCRec))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbVNCRec>(),
        8usize,
        concat!("Alignment of ", stringify!(rfbVNCRec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbVNCRec),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbVNCRec),
            "::",
            stringify!(tv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).readTimestamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbVNCRec),
            "::",
            stringify!(readTimestamp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).doNotSleep) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbVNCRec),
            "::",
            stringify!(doNotSleep)
        )
    );
}
#[doc = " client data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rfbClientData {
    pub tag: *mut ::core::ffi::c_void,
    pub data: *mut ::core::ffi::c_void,
    pub next: *mut rfbClientData,
}
#[test]
fn bindgen_test_layout_rfbClientData() {
    const UNINIT: ::core::mem::MaybeUninit<rfbClientData> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rfbClientData>(),
        24usize,
        concat!("Size of: ", stringify!(rfbClientData))
    );
    assert_eq!(
        ::core::mem::align_of::<rfbClientData>(),
        8usize,
        concat!("Alignment of ", stringify!(rfbClientData))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientData),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientData),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rfbClientData),
            "::",
            stringify!(next)
        )
    );
}
#[doc = " app data (belongs into rfbClient?)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppData {
    pub shareDesktop: rfbBool,
    pub viewOnly: rfbBool,
    pub encodingsString: *const ::core::ffi::c_char,
    pub useBGR233: rfbBool,
    pub nColours: ::core::ffi::c_int,
    pub forceOwnCmap: rfbBool,
    pub forceTrueColour: rfbBool,
    pub requestedDepth: ::core::ffi::c_int,
    pub compressLevel: ::core::ffi::c_int,
    pub qualityLevel: ::core::ffi::c_int,
    pub enableJPEG: rfbBool,
    pub useRemoteCursor: rfbBool,
    #[doc = "< use palmvnc specific SetScale (vs ultravnc)"]
    pub palmVNC: rfbBool,
    #[doc = "< 0 means no scale set, else 1/scaleSetting"]
    pub scaleSetting: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_AppData() {
    const UNINIT: ::core::mem::MaybeUninit<AppData> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<AppData>(),
        48usize,
        concat!("Size of: ", stringify!(AppData))
    );
    assert_eq!(
        ::core::mem::align_of::<AppData>(),
        8usize,
        concat!("Alignment of ", stringify!(AppData))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shareDesktop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(shareDesktop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).viewOnly) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(viewOnly)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encodingsString) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(encodingsString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useBGR233) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(useBGR233)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nColours) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(nColours)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).forceOwnCmap) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(forceOwnCmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).forceTrueColour) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(forceTrueColour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).requestedDepth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(requestedDepth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).compressLevel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(compressLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).qualityLevel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(qualityLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enableJPEG) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(enableJPEG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useRemoteCursor) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(useRemoteCursor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).palmVNC) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(palmVNC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scaleSetting) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AppData),
            "::",
            stringify!(scaleSetting)
        )
    );
}
#[doc = " For GetCredentialProc callback function to return"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union _rfbCredential {
    pub x509Credential: _rfbCredential__bindgen_ty_1,
    pub userCredential: _rfbCredential__bindgen_ty_2,
}
#[doc = " X509 (VeNCrypt)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbCredential__bindgen_ty_1 {
    pub x509CACertFile: *mut ::core::ffi::c_char,
    pub x509CACrlFile: *mut ::core::ffi::c_char,
    pub x509ClientCertFile: *mut ::core::ffi::c_char,
    pub x509ClientKeyFile: *mut ::core::ffi::c_char,
    pub x509CrlVerifyMode: u8,
}
#[test]
fn bindgen_test_layout__rfbCredential__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbCredential__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbCredential__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(_rfbCredential__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbCredential__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbCredential__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x509CACertFile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_1),
            "::",
            stringify!(x509CACertFile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x509CACrlFile) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_1),
            "::",
            stringify!(x509CACrlFile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x509ClientCertFile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_1),
            "::",
            stringify!(x509ClientCertFile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x509ClientKeyFile) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_1),
            "::",
            stringify!(x509ClientKeyFile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x509CrlVerifyMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_1),
            "::",
            stringify!(x509CrlVerifyMode)
        )
    );
}
#[doc = " Plain (VeNCrypt), MSLogon (UltraVNC)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbCredential__bindgen_ty_2 {
    pub username: *mut ::core::ffi::c_char,
    pub password: *mut ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout__rfbCredential__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbCredential__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbCredential__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(_rfbCredential__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbCredential__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbCredential__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).username) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_2),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).password) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential__bindgen_ty_2),
            "::",
            stringify!(password)
        )
    );
}
#[test]
fn bindgen_test_layout__rfbCredential() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbCredential> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbCredential>(),
        40usize,
        concat!("Size of: ", stringify!(_rfbCredential))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbCredential>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbCredential))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x509Credential) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential),
            "::",
            stringify!(x509Credential)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).userCredential) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbCredential),
            "::",
            stringify!(userCredential)
        )
    );
}
#[doc = " For GetCredentialProc callback function to return"]
pub type rfbCredential = _rfbCredential;
#[doc = " Handles a text chat message. If your application should accept text messages\n from the server, define a function with this prototype and set\n client->HandleTextChat to a pointer to that function subsequent to your\n rfbGetClient() call.\n @param client The client which called the text chat handler\n @param value  text length if text != NULL, or one of rfbTextChatOpen,\n rfbTextChatClose, rfbTextChatFinished if text == NULL\n @param text The text message from the server"]
pub type HandleTextChatProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        value: ::core::ffi::c_int,
        text: *mut ::core::ffi::c_char,
    ),
>;
#[doc = " Handles XVP server messages. If your application sends XVP messages to the\n server, you'll want to handle the server's XVP_FAIL and XVP_INIT responses.\n Define a function with this prototype and set client->HandleXvpMsg to a\n pointer to that function subsequent to your rfbGetClient() call.\n @param client The client which called the XVP message handler\n @param version The highest XVP extension version that the server supports\n @param opcode The opcode. 0 is XVP_FAIL, 1 is XVP_INIT"]
pub type HandleXvpMsgProc =
    ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient, version: u8, opcode: u8)>;
pub type HandleKeyboardLedStateProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        value: ::core::ffi::c_int,
        pad: ::core::ffi::c_int,
    ),
>;
pub type HandleCursorPosProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
    ) -> rfbBool,
>;
pub type SoftCursorLockAreaProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ),
>;
pub type SoftCursorUnlockScreenProc =
    ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient)>;
#[doc = "Callback indicating that a rectangular area of the client's framebuffer was updated.\nAs a server will usually send several rects per rfbFramebufferUpdate message, this\ncallback is usually called multiple times per rfbFramebufferUpdate message.\n@param client The client whose framebuffer was (partially) updated\n@param x The x-coordinate of the upper left corner of the updated rectangle\n@param y The y-coordinate of the upper left corner of the updated rectangle\n@param w The width of the updated rectangle\n@param h The heigth of the updated rectangle"]
pub type GotFrameBufferUpdateProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ),
>;
#[doc = "Callback indicating that a client has completely processed an rfbFramebufferUpdate\nmessage sent by a server.\nThis is called exactly once per each handled rfbFramebufferUpdate message.\n@param client The client which finished processing an rfbFramebufferUpdate"]
pub type FinishedFrameBufferUpdateProc =
    ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient)>;
pub type GetPasswordProc = ::core::option::Option<
    unsafe extern "C" fn(client: *mut _rfbClient) -> *mut ::core::ffi::c_char,
>;
pub type GetCredentialProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        credentialType: ::core::ffi::c_int,
    ) -> *mut rfbCredential,
>;
pub type MallocFrameBufferProc =
    ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient) -> rfbBool>;
pub type GotXCutTextProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        text: *const ::core::ffi::c_char,
        textlen: ::core::ffi::c_int,
    ),
>;
pub type BellProc = ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient)>;
#[doc = "Called when a cursor shape update was received from the server. The decoded cursor shape\nwill be in client->rcSource. It's up to the application to do something with this, e.g. draw\ninto a viewer's window. If you want the server to draw the cursor into the framebuffer, be\ncareful not to announce remote cursor support, i.e. not include rfbEncodingXCursor or\nrfbEncodingRichCursor in SetFormatAndEncodings()."]
pub type GotCursorShapeProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        xhot: ::core::ffi::c_int,
        yhot: ::core::ffi::c_int,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        bytesPerPixel: ::core::ffi::c_int,
    ),
>;
pub type GotCopyRectProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        src_x: ::core::ffi::c_int,
        src_y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
        dest_x: ::core::ffi::c_int,
        dest_y: ::core::ffi::c_int,
    ),
>;
pub type GotFillRectProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
        colour: u32,
    ),
>;
pub type GotBitmapProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        buffer: *const u8,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ),
>;
pub type GotJpegProc = ::core::option::Option<
    unsafe extern "C" fn(
        client: *mut _rfbClient,
        buffer: *const u8,
        length: ::core::ffi::c_int,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> rfbBool,
>;
pub type LockWriteToTLSProc =
    ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient) -> rfbBool>;
#[doc = " @deprecated"]
pub type UnlockWriteToTLSProc =
    ::core::option::Option<unsafe extern "C" fn(client: *mut _rfbClient) -> rfbBool>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _rfbClient {
    pub frameBuffer: *mut u8,
    pub width: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub endianTest: ::core::ffi::c_int,
    pub appData: AppData,
    pub programName: *const ::core::ffi::c_char,
    pub serverHost: *mut ::core::ffi::c_char,
    #[doc = "< if -1, then use file recorded by vncrec"]
    pub serverPort: ::core::ffi::c_int,
    pub listenSpecified: rfbBool,
    pub listenPort: ::core::ffi::c_int,
    pub flashPort: ::core::ffi::c_int,
    pub updateRect: _rfbClient__bindgen_ty_1,
    pub buffer: [::core::ffi::c_char; 307200usize],
    pub sock: ::core::ffi::c_int,
    pub canUseCoRRE: rfbBool,
    pub canUseHextile: rfbBool,
    pub desktopName: *mut ::core::ffi::c_char,
    pub format: rfbPixelFormat,
    pub si: rfbServerInitMsg,
    pub buf: [::core::ffi::c_char; 8192usize],
    pub bufoutptr: *mut ::core::ffi::c_char,
    pub buffered: ::core::ffi::c_uint,
    pub ultra_buffer_size: ::core::ffi::c_int,
    pub ultra_buffer: *mut ::core::ffi::c_char,
    pub raw_buffer_size: ::core::ffi::c_int,
    pub raw_buffer: *mut ::core::ffi::c_char,
    pub decompStream: z_stream,
    pub decompStreamInited: rfbBool,
    pub zlib_buffer: [::core::ffi::c_char; 30000usize],
    pub zlibStream: [z_stream; 4usize],
    pub zlibStreamActive: [rfbBool; 4usize],
    pub cutZeros: rfbBool,
    pub rectWidth: ::core::ffi::c_int,
    pub rectColors: ::core::ffi::c_int,
    pub tightPalette: [::core::ffi::c_char; 1024usize],
    pub tightPrevRow: [u8; 12288usize],
    #[doc = " JPEG decoder state (obsolete-- do not use)."]
    pub jpegError: rfbBool,
    pub jpegSrcManager: *mut jpeg_source_mgr,
    pub jpegBufferPtr: *mut ::core::ffi::c_void,
    pub jpegBufferLen: usize,
    #[doc = " Holds cursor shape data when received from server."]
    pub rcSource: *mut u8,
    #[doc = " Holds cursor shape data when received from server."]
    pub rcMask: *mut u8,
    #[doc = " private data pointer"]
    pub clientData: *mut rfbClientData,
    pub vncRec: *mut rfbVNCRec,
    pub KeyboardLedStateEnabled: ::core::ffi::c_int,
    pub CurrentKeyboardLedState: ::core::ffi::c_int,
    pub canHandleNewFBSize: ::core::ffi::c_int,
    pub HandleTextChat: HandleTextChatProc,
    pub HandleKeyboardLedState: HandleKeyboardLedStateProc,
    pub HandleCursorPos: HandleCursorPosProc,
    pub SoftCursorLockArea: SoftCursorLockAreaProc,
    pub SoftCursorUnlockScreen: SoftCursorUnlockScreenProc,
    pub GotFrameBufferUpdate: GotFrameBufferUpdateProc,
    #[doc = " the pointer returned by GetPassword will be freed after use!"]
    pub GetPassword: GetPasswordProc,
    pub MallocFrameBuffer: MallocFrameBufferProc,
    pub GotXCutText: GotXCutTextProc,
    pub Bell: BellProc,
    pub GotCursorShape: GotCursorShapeProc,
    pub GotCopyRect: GotCopyRectProc,
    #[doc = " Which messages are supported by the server\n This is a *guess* for most servers.\n (If we can even detect the type of server)\n\n If the server supports the \"rfbEncodingSupportedMessages\"\n then this will be updated when the encoding is received to\n accurately reflect the servers capabilities."]
    pub supportedMessages: rfbSupportedMessages,
    #[doc = " negotiated protocol version"]
    pub major: ::core::ffi::c_int,
    #[doc = " negotiated protocol version"]
    pub minor: ::core::ffi::c_int,
    #[doc = " The selected security types"]
    pub authScheme: u32,
    #[doc = " The selected security types"]
    pub subAuthScheme: u32,
    #[doc = " The TLS session for Anonymous TLS and VeNCrypt"]
    pub tlsSession: *mut ::core::ffi::c_void,
    #[doc = " To support security types that requires user input (except VNC password\n authentication), for example VeNCrypt and MSLogon, this callback function\n must be set before the authentication. Otherwise, it implicates that the\n caller application does not support it and related security types should\n be bypassed."]
    pub GetCredential: GetCredentialProc,
    #[doc = " The 0-terminated security types supported by the client.\n Set by function SetClientAuthSchemes()"]
    pub clientAuthSchemes: *mut u32,
    #[doc = " When the server is a repeater, this specifies the final destination"]
    pub destHost: *mut ::core::ffi::c_char,
    pub destPort: ::core::ffi::c_int,
    #[doc = " the QoS IP DSCP for this client"]
    pub QoS_DSCP: ::core::ffi::c_int,
    #[doc = " hook to handle xvp server messages"]
    pub HandleXvpMsg: HandleXvpMsgProc,
    pub listenSock: ::core::ffi::c_int,
    pub FinishedFrameBufferUpdate: FinishedFrameBufferUpdateProc,
    pub listenAddress: *mut ::core::ffi::c_char,
    pub listen6Sock: ::core::ffi::c_int,
    pub listen6Address: *mut ::core::ffi::c_char,
    pub listen6Port: ::core::ffi::c_int,
    pub outputWindow: ::core::ffi::c_ulong,
    #[doc = " These lock/unlock hooks are not used anymore. LibVNCClient will now use\n platform-specific synchronization library to protect concurrent TLS R/W.\n\n @deprecated"]
    pub LockWriteToTLS: LockWriteToTLSProc,
    pub UnlockWriteToTLS: UnlockWriteToTLSProc,
    #[doc = " Hooks for custom rendering\n\n VNC rendering boils down to 3 activities:\n - GotCopyRect: copy an area of the framebuffer\n - GotFillRect: fill an area of the framebuffer with a solid color\n - GotBitmap: copy the bitmap in the buffer into the framebuffer\n The client application should either set all three of these or none!"]
    pub GotFillRect: GotFillRectProc,
    pub GotBitmap: GotBitmapProc,
    #[doc = " Hook for custom JPEG decoding and rendering"]
    pub GotJpeg: GotJpegProc,
    #[doc = " JPEG decoder state."]
    pub tjhnd: *mut ::core::ffi::c_void,
    pub connectTimeout: ::core::ffi::c_uint,
    pub readTimeout: ::core::ffi::c_uint,
    #[doc = " Mutex to protect concurrent TLS read/write.\n For internal use only."]
    pub tlsRwMutex: pthread_mutex_t,
    pub requestedResize: rfbBool,
    #[doc = " Used for intended dimensions, rfbClient.width and rfbClient.height are used to manage the real framebuffer dimensions."]
    pub screen: rfbExtDesktopScreen,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbClient__bindgen_ty_1 {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
    pub w: ::core::ffi::c_int,
    pub h: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout__rfbClient__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbClient__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbClient__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_rfbClient__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbClient__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_rfbClient__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
}
#[test]
fn bindgen_test_layout__rfbClient() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbClient> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbClient>(),
        359984usize,
        concat!("Size of: ", stringify!(_rfbClient))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbClient>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbClient))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).frameBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(frameBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).endianTest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(endianTest)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).appData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(appData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).programName) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(programName)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).serverHost) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(serverHost)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).serverPort) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(serverPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listenSpecified) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listenSpecified)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listenPort) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listenPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flashPort) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(flashPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).updateRect) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(updateRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sock) as usize - ptr as usize },
        307320usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canUseCoRRE) as usize - ptr as usize },
        307324usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(canUseCoRRE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canUseHextile) as usize - ptr as usize },
        307325usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(canUseHextile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desktopName) as usize - ptr as usize },
        307328usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(desktopName)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        307336usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si) as usize - ptr as usize },
        307352usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(si)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        307376usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bufoutptr) as usize - ptr as usize },
        315568usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(bufoutptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffered) as usize - ptr as usize },
        315576usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(buffered)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ultra_buffer_size) as usize - ptr as usize },
        315580usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(ultra_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ultra_buffer) as usize - ptr as usize },
        315584usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(ultra_buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_buffer_size) as usize - ptr as usize },
        315592usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(raw_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_buffer) as usize - ptr as usize },
        315600usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(raw_buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decompStream) as usize - ptr as usize },
        315608usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(decompStream)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decompStreamInited) as usize - ptr as usize },
        315720usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(decompStreamInited)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zlib_buffer) as usize - ptr as usize },
        315721usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(zlib_buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zlibStream) as usize - ptr as usize },
        345728usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(zlibStream)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zlibStreamActive) as usize - ptr as usize },
        346176usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(zlibStreamActive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cutZeros) as usize - ptr as usize },
        346180usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(cutZeros)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rectWidth) as usize - ptr as usize },
        346184usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(rectWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rectColors) as usize - ptr as usize },
        346188usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(rectColors)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightPalette) as usize - ptr as usize },
        346192usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(tightPalette)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tightPrevRow) as usize - ptr as usize },
        347216usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(tightPrevRow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).jpegError) as usize - ptr as usize },
        359504usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(jpegError)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).jpegSrcManager) as usize - ptr as usize },
        359512usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(jpegSrcManager)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).jpegBufferPtr) as usize - ptr as usize },
        359520usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(jpegBufferPtr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).jpegBufferLen) as usize - ptr as usize },
        359528usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(jpegBufferLen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rcSource) as usize - ptr as usize },
        359536usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(rcSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rcMask) as usize - ptr as usize },
        359544usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(rcMask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clientData) as usize - ptr as usize },
        359552usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(clientData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vncRec) as usize - ptr as usize },
        359560usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(vncRec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KeyboardLedStateEnabled) as usize - ptr as usize },
        359568usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(KeyboardLedStateEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CurrentKeyboardLedState) as usize - ptr as usize },
        359572usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(CurrentKeyboardLedState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canHandleNewFBSize) as usize - ptr as usize },
        359576usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(canHandleNewFBSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HandleTextChat) as usize - ptr as usize },
        359584usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(HandleTextChat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HandleKeyboardLedState) as usize - ptr as usize },
        359592usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(HandleKeyboardLedState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HandleCursorPos) as usize - ptr as usize },
        359600usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(HandleCursorPos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SoftCursorLockArea) as usize - ptr as usize },
        359608usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(SoftCursorLockArea)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SoftCursorUnlockScreen) as usize - ptr as usize },
        359616usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(SoftCursorUnlockScreen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotFrameBufferUpdate) as usize - ptr as usize },
        359624usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotFrameBufferUpdate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GetPassword) as usize - ptr as usize },
        359632usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GetPassword)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MallocFrameBuffer) as usize - ptr as usize },
        359640usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(MallocFrameBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotXCutText) as usize - ptr as usize },
        359648usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotXCutText)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Bell) as usize - ptr as usize },
        359656usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(Bell)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotCursorShape) as usize - ptr as usize },
        359664usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotCursorShape)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotCopyRect) as usize - ptr as usize },
        359672usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotCopyRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).supportedMessages) as usize - ptr as usize },
        359680usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(supportedMessages)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        359744usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        359748usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).authScheme) as usize - ptr as usize },
        359752usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(authScheme)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).subAuthScheme) as usize - ptr as usize },
        359756usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(subAuthScheme)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tlsSession) as usize - ptr as usize },
        359760usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(tlsSession)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GetCredential) as usize - ptr as usize },
        359768usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GetCredential)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clientAuthSchemes) as usize - ptr as usize },
        359776usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(clientAuthSchemes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).destHost) as usize - ptr as usize },
        359784usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(destHost)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).destPort) as usize - ptr as usize },
        359792usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(destPort)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QoS_DSCP) as usize - ptr as usize },
        359796usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(QoS_DSCP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HandleXvpMsg) as usize - ptr as usize },
        359800usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(HandleXvpMsg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listenSock) as usize - ptr as usize },
        359808usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listenSock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FinishedFrameBufferUpdate) as usize - ptr as usize },
        359816usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(FinishedFrameBufferUpdate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listenAddress) as usize - ptr as usize },
        359824usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listenAddress)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listen6Sock) as usize - ptr as usize },
        359832usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listen6Sock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listen6Address) as usize - ptr as usize },
        359840usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listen6Address)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listen6Port) as usize - ptr as usize },
        359848usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(listen6Port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).outputWindow) as usize - ptr as usize },
        359856usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(outputWindow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LockWriteToTLS) as usize - ptr as usize },
        359864usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(LockWriteToTLS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UnlockWriteToTLS) as usize - ptr as usize },
        359872usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(UnlockWriteToTLS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotFillRect) as usize - ptr as usize },
        359880usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotFillRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotBitmap) as usize - ptr as usize },
        359888usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GotJpeg) as usize - ptr as usize },
        359896usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(GotJpeg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tjhnd) as usize - ptr as usize },
        359904usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(tjhnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).connectTimeout) as usize - ptr as usize },
        359912usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(connectTimeout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).readTimeout) as usize - ptr as usize },
        359916usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(readTimeout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tlsRwMutex) as usize - ptr as usize },
        359920usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(tlsRwMutex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).requestedResize) as usize - ptr as usize },
        359960usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(requestedResize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).screen) as usize - ptr as usize },
        359964usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClient),
            "::",
            stringify!(screen)
        )
    );
}
pub type rfbClient = _rfbClient;
extern "C" {
    #[doc = " Handles XCursor and RichCursor shape updates from the server.\n We emulate cursor operating on the frame buffer (that is\n why we call it \"software cursor\"). This decodes the received cursor\n shape and hands it over to GotCursorShapeProc, if set."]
    pub fn HandleCursorShape(
        client: *mut rfbClient,
        xhot: ::core::ffi::c_int,
        yhot: ::core::ffi::c_int,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        enc: u32,
    ) -> rfbBool;
}
extern "C" {
    pub fn listenForIncomingConnections(viewer: *mut rfbClient);
}
extern "C" {
    pub fn listenForIncomingConnectionsNoFork(
        viewer: *mut rfbClient,
        usec_timeout: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut rfbEnableClientLogging: rfbBool;
}
pub type rfbClientLogProc =
    ::core::option::Option<unsafe extern "C" fn(format: *const ::core::ffi::c_char, ...)>;
extern "C" {
    pub static mut rfbClientLog: rfbClientLogProc;
}
extern "C" {
    pub static mut rfbClientErr: rfbClientLogProc;
}
extern "C" {
    pub fn ConnectToRFBServer(
        client: *mut rfbClient,
        hostname: *const ::core::ffi::c_char,
        port: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn ConnectToRFBRepeater(
        client: *mut rfbClient,
        repeaterHost: *const ::core::ffi::c_char,
        repeaterPort: ::core::ffi::c_int,
        destHost: *const ::core::ffi::c_char,
        destPort: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn SetClientAuthSchemes(
        client: *mut rfbClient,
        authSchemes: *const u32,
        size: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn InitialiseRFBConnection(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    #[doc = " Sends format and encoding parameters to the server. Your application can\n modify the 'client' data structure directly. However some changes to this\n structure must be communicated back to the server. For instance, if you\n change the encoding to hextile, the server needs to know that it should send\n framebuffer updates in hextile format. Likewise if you change the pixel\n format of the framebuffer, the server must be notified about this as well.\n Call this function to propagate your changes of the local 'client' structure\n over to the server.\n @li Encoding type\n @li RFB protocol extensions announced via pseudo-encodings\n @li Framebuffer pixel format (like RGB vs ARGB)\n @li Remote cursor support\n @param client The client in which the format or encodings have been changed\n @return true if the format or encodings were sent to the server successfully,\n false otherwise"]
    pub fn SetFormatAndEncodings(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    pub fn SendIncrementalFramebufferUpdateRequest(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    #[doc = " Sends a framebuffer update request to the server. A VNC client may request an\n update from the server at any time. You can also specify which portions of\n the screen you want updated. This can be handy if a pointer is at certain\n location and the user pressed a mouse button, for instance. Then you can\n immediately request an update of the region around the pointer from the\n server.\n @note The coordinate system is a left-handed Cartesian coordinate system with\n the Z axis (unused) pointing out of the screen. Alternately you can think of\n it as a right-handed Cartesian coordinate system with the Z axis pointing\n into the screen. The origin is at the upper left corner of the framebuffer.\n @param client The client through which to send the request\n @param x The horizontal position of the update request rectangle\n @param y The vertical position of the update request rectangle\n @param w The width of the update request rectangle\n @param h The height of the update request rectangle\n @param incremental false: server sends rectangle even if nothing changed.\n true: server only sends changed parts of rectangle.\n @return true if the update request was sent successfully, false otherwise"]
    pub fn SendFramebufferUpdateRequest(
        client: *mut rfbClient,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
        incremental: rfbBool,
    ) -> rfbBool;
}
extern "C" {
    pub fn SendScaleSetting(client: *mut rfbClient, scaleSetting: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    #[doc = " Sends a pointer event to the server. A pointer event includes a cursor\n location and a button mask. The button mask indicates which buttons on the\n pointing device are pressed. Each button is represented by a bit in the\n button mask. A 1 indicates the button is pressed while a 0 indicates that it\n is not pressed. You may use these pre-defined button masks by ORing them\n together: rfbButton1Mask, rfbButton2Mask, rfbButton3Mask, rfbButton4Mask\n rfbButton5Mask\n @note  The cursor location is relative to the client's framebuffer, not the\n client's screen itself.\n @note The coordinate system is a left-handed Cartesian coordinate system with\n the Z axis (unused) pointing out of the screen. Alternately you can think of\n it as a right-handed Cartesian coordinate system with the Z axis pointing\n into the screen. The origin is at the upper left corner of the screen.\n @param client The client through which to send the pointer event\n @param x the horizontal location of the cursor\n @param y the vertical location of the cursor\n @param buttonMask the button mask indicating which buttons are pressed\n @return true if the pointer event was sent successfully, false otherwise"]
    pub fn SendPointerEvent(
        client: *mut rfbClient,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        buttonMask: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    #[doc = " Sends a SetDesktopSize event to the server.\n @param client The client through which to send the SetDesktopSize event\n @param width The width of the update request rectangle\n @param height The height of the update request rectangle\n @return true if the SetDesktopSize event was send successfully, false otherwise"]
    pub fn SendExtDesktopSize(client: *mut rfbClient, width: u16, height: u16) -> rfbBool;
}
extern "C" {
    #[doc = " Sends a key event to the server. If your application is not merely a VNC\n viewer (i.e. it controls the server), you'll want to send the keys that the\n user presses to the server. Use this function to do that.\n @param client The client through which to send the key event\n @param key An rfbKeySym defined in rfb/keysym.h\n @param down true if this was a key down event, false otherwise\n @return true if the key event was send successfully, false otherwise"]
    pub fn SendKeyEvent(client: *mut rfbClient, key: u32, down: rfbBool) -> rfbBool;
}
extern "C" {
    #[doc = " The same as SendKeyEvent, except a key code will be sent along with the\n symbol if the server supports extended key events.\n @param client The client through which to send the key event\n @param keysym An rfbKeySym defined in rfb/keysym.h\n @param keycode An XT key code\n @param down true if this was a key down event, false otherwise\n @return true if the extended key event is supported and was sent\n successfully, false otherwise"]
    pub fn SendExtendedKeyEvent(
        client: *mut rfbClient,
        keysym: u32,
        keycode: u32,
        down: rfbBool,
    ) -> rfbBool;
}
extern "C" {
    #[doc = " Places a string on the server's clipboard. Use this function if you want to\n be able to copy and paste between the server and your application. For\n instance, when your application is notified that the user copied some text\n onto the clipboard, you would call this function to synchronize the server's\n clipboard with your local clipboard.\n @param client The client structure through which to send the client cut text\n message\n @param str The string to send (doesn't need to be NULL terminated)\n @param len The length of the string\n @return true if the client cut message was sent successfully, false otherwise"]
    pub fn SendClientCutText(
        client: *mut rfbClient,
        str_: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    #[doc = " Handles messages from the RFB server. You must call this function\n intermittently so LibVNCClient can parse messages from the server. For\n example, if your app has a draw loop, you could place a call to this\n function within that draw loop.\n @note You must call WaitForMessage() before you call this function.\n @param client The client which will handle the RFB server messages\n @return true if the client was able to handle the RFB server messages, false\n otherwise"]
    pub fn HandleRFBServerMessage(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    #[doc = " Sends a text chat message to the server.\n @param client The client through which to send the message\n @param text The text to send\n @return true if the text was sent successfully, false otherwise"]
    pub fn TextChatSend(client: *mut rfbClient, text: *mut ::core::ffi::c_char) -> rfbBool;
}
extern "C" {
    #[doc = " Opens a text chat window on the server.\n @param client The client through which to send the message\n @return true if the window was opened successfully, false otherwise"]
    pub fn TextChatOpen(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    #[doc = " Closes the text chat window on the server.\n @param client The client through which to send the message\n @return true if the window was closed successfully, false otherwise"]
    pub fn TextChatClose(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    pub fn TextChatFinish(client: *mut rfbClient) -> rfbBool;
}
extern "C" {
    pub fn PermitServerInput(client: *mut rfbClient, enabled: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    pub fn SendXvpMsg(client: *mut rfbClient, version: u8, code: u8) -> rfbBool;
}
extern "C" {
    pub fn PrintPixelFormat(format: *mut rfbPixelFormat);
}
extern "C" {
    pub fn SupportsClient2Server(
        client: *mut rfbClient,
        messageType: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    pub fn SupportsServer2Client(
        client: *mut rfbClient,
        messageType: ::core::ffi::c_int,
    ) -> rfbBool;
}
extern "C" {
    #[doc = " Associates a client data tag with the given pointer. LibVNCClient has\n several events to which you can associate your own handlers. These handlers\n have the client structure as one of their parameters. Sometimes, you may want\n to make data from elsewhere in your application available to these handlers\n without using a global variable. To do this, you call\n rfbClientSetClientData() and associate the data with a tag. Then, your\n handler can call rfbClientGetClientData() and get the a pointer to the data\n associated with that tag.\n @param client The client in which to set the client data\n @param tag A unique tag which identifies the data\n @param data A pointer to the data to associate with the tag"]
    pub fn rfbClientSetClientData(
        client: *mut rfbClient,
        tag: *mut ::core::ffi::c_void,
        data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " Returns a pointer to the client data associated with the given tag. See the\n the documentation for rfbClientSetClientData() for a discussion of how you\n can use client data.\n @param client The client from which to get the client data\n @param tag The tag which identifies the client data\n @return a pointer to the client data"]
    pub fn rfbClientGetClientData(
        client: *mut rfbClient,
        tag: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rfbClientProtocolExtension {
    pub encodings: *mut ::core::ffi::c_int,
    #[doc = " returns TRUE if the encoding was handled"]
    pub handleEncoding: ::core::option::Option<
        unsafe extern "C" fn(
            cl: *mut rfbClient,
            rect: *mut rfbFramebufferUpdateRectHeader,
        ) -> rfbBool,
    >,
    #[doc = " returns TRUE if it handled the message"]
    pub handleMessage: ::core::option::Option<
        unsafe extern "C" fn(cl: *mut rfbClient, message: *mut rfbServerToClientMsg) -> rfbBool,
    >,
    pub next: *mut _rfbClientProtocolExtension,
    pub securityTypes: *const u32,
    #[doc = " returns TRUE if it handled the authentication"]
    pub handleAuthentication: ::core::option::Option<
        unsafe extern "C" fn(cl: *mut rfbClient, authScheme: u32) -> rfbBool,
    >,
}
#[test]
fn bindgen_test_layout__rfbClientProtocolExtension() {
    const UNINIT: ::core::mem::MaybeUninit<_rfbClientProtocolExtension> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rfbClientProtocolExtension>(),
        48usize,
        concat!("Size of: ", stringify!(_rfbClientProtocolExtension))
    );
    assert_eq!(
        ::core::mem::align_of::<_rfbClientProtocolExtension>(),
        8usize,
        concat!("Alignment of ", stringify!(_rfbClientProtocolExtension))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encodings) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientProtocolExtension),
            "::",
            stringify!(encodings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handleEncoding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientProtocolExtension),
            "::",
            stringify!(handleEncoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handleMessage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientProtocolExtension),
            "::",
            stringify!(handleMessage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientProtocolExtension),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).securityTypes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientProtocolExtension),
            "::",
            stringify!(securityTypes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handleAuthentication) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rfbClientProtocolExtension),
            "::",
            stringify!(handleAuthentication)
        )
    );
}
pub type rfbClientProtocolExtension = _rfbClientProtocolExtension;
extern "C" {
    pub fn rfbClientRegisterExtension(e: *mut rfbClientProtocolExtension);
}
extern "C" {
    pub static mut errorMessageOnReadFailure: rfbBool;
}
extern "C" {
    pub fn ReadFromRFBServer(
        client: *mut rfbClient,
        out: *mut ::core::ffi::c_char,
        n: ::core::ffi::c_uint,
    ) -> rfbBool;
}
extern "C" {
    pub fn WriteToRFBServer(
        client: *mut rfbClient,
        buf: *const ::core::ffi::c_char,
        n: ::core::ffi::c_uint,
    ) -> rfbBool;
}
extern "C" {
    pub fn FindFreeTcpPort() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ListenAtTcpPort(port: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ListenAtTcpPortAndAddress(
        port: ::core::ffi::c_int,
        address: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "Tries to connect to an IPv4 host.\n@param host Binary IPv4 address\n@param port Port\n@return A blocking socket or RFB_INVALID_SOCKET if the connection failed"]
    pub fn ConnectClientToTcpAddr(
        host: ::core::ffi::c_uint,
        port: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "Tries to connect to an IPv4 or IPv6 host.\n@param hostname A hostname or IP address\n@param port Port\n@return A blocking socket or RFB_INVALID_SOCKET if the connection failed"]
    pub fn ConnectClientToTcpAddr6(
        hostname: *const ::core::ffi::c_char,
        port: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "Tries to connect to a Unix socket.\n@param sockFile Path of the socket file\n@return A blocking socket or RFB_INVALID_SOCKET if the connection failed"]
    pub fn ConnectClientToUnixSock(sockFile: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "Tries to connect to an IPv4 host using the given timeout value.\n@param host Binary IPv4 address\n@param port Port\n@param timeout The time in seconds to wait for a connection\n@return A nonblocking socket or RFB_INVALID_SOCKET if the connection failed"]
    pub fn ConnectClientToTcpAddrWithTimeout(
        host: ::core::ffi::c_uint,
        port: ::core::ffi::c_int,
        timeout: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "Tries to connect to an IPv4 or IPv6 host using the given timeout value.\n@param hostname A hostname or IP address\n@param port Port\n@param timeout The time in seconds to wait for a connection\n@return A nonblocking socket or RFB_INVALID_SOCKET if the connection failed"]
    pub fn ConnectClientToTcpAddr6WithTimeout(
        hostname: *const ::core::ffi::c_char,
        port: ::core::ffi::c_int,
        timeout: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = "Tries to connect to a Unix socket using the given timeout value.\n@param sockFile Path of the socket file\n@param timeout The time in seconds to wait for a connection\n@return A nonblocking socket or RFB_INVALID_SOCKET if the connection failed"]
    pub fn ConnectClientToUnixSockWithTimeout(
        sockFile: *const ::core::ffi::c_char,
        timeout: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn AcceptTcpConnection(listenSock: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn SetNonBlocking(sock: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    pub fn SetBlocking(sock: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    pub fn SetDSCP(sock: ::core::ffi::c_int, dscp: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    pub fn StringToIPAddr(
        str_: *const ::core::ffi::c_char,
        addr: *mut ::core::ffi::c_uint,
    ) -> rfbBool;
}
extern "C" {
    pub fn SameMachine(sock: ::core::ffi::c_int) -> rfbBool;
}
extern "C" {
    #[doc = " Waits for an RFB message to arrive from the server. Before handling a message\n with HandleRFBServerMessage(), you must wait for your client to receive one.\n This function blocks until a message is received. You may specify a timeout\n in microseconds. Once this number of microseconds have elapsed, the function\n will return.\n @param client The client to cause to wait until a message is received\n @param usecs The timeout in microseconds\n @return the return value of the underlying select() call"]
    pub fn WaitForMessage(client: *mut rfbClient, usecs: ::core::ffi::c_uint)
        -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Allocates and returns a pointer to an rfbClient structure. This will probably\n be the first LibVNCClient function your client code calls. Most libVNCClient\n functions operate on an rfbClient structure, and this function allocates\n memory for that structure. When you're done with the rfbClient structure\n pointer this function returns, you should free the memory rfbGetClient()\n allocated by calling rfbClientCleanup().\n\n A pixel is one dot on the screen. The number of bytes in a pixel will depend\n on the number of samples in that pixel and the number of bits in each sample.\n A sample represents one of the primary colors in a color model. The RGB\n color model uses red, green, and blue samples respectively. Suppose you\n wanted to use 16-bit RGB color: You would have three samples per pixel (one\n for each primary color), five bits per sample (the quotient of 16 RGB bits\n divided by three samples), and two bytes per pixel (the smallest multiple of\n eight bits in which the 16-bit pixel will fit). If you wanted 32-bit RGB\n color, you would have three samples per pixel again, eight bits per sample\n (since that's how 32-bit color is defined), and four bytes per pixel (the\n smallest multiple of eight bits in which the 32-bit pixel will fit.\n @param bitsPerSample The number of bits in a sample\n @param samplesPerPixel The number of samples in a pixel\n @param bytesPerPixel The number of bytes in a pixel\n @return a pointer to the allocated rfbClient structure"]
    pub fn rfbGetClient(
        bitsPerSample: ::core::ffi::c_int,
        samplesPerPixel: ::core::ffi::c_int,
        bytesPerPixel: ::core::ffi::c_int,
    ) -> *mut rfbClient;
}
extern "C" {
    #[doc = " Initializes the client. The format is {PROGRAM_NAME, [OPTIONS]..., HOST}. This\n function does not initialize the program name if the rfbClient's program\n name is set already. The options are as follows:\n <table>\n <tr><th>Option</th><th>Description</th></tr>\n <tr><td>-listen</td><td>Listen for incoming connections.</td></tr>\n <tr><td>-listennofork</td><td>Listen for incoming connections without forking.\n </td></tr>\n <tr><td>-play</td><td>Set this client to replay a previously recorded session.</td></tr>\n <tr><td>-encodings</td><td>Set the encodings to use. The next item in the\n argv array is the encodings string, consisting of comma separated encodings like 'tight,ultra,raw'.</td></tr>\n <tr><td>-compress</td><td>Set the compression level. The next item in the\n argv array is the compression level as an integer. Ranges from 0 (lowest) to 9 (highest).\n </td></tr>\n <tr><td>-scale</td><td>Set the scaling level. The next item in the\n argv array is the scaling level as an integer. The screen will be scaled down by this factor.</td></tr>\n <tr><td>-qosdscp</td><td>Set the Quality of Service Differentiated Services\n Code Point (QoS DSCP). The next item in the argv array is the code point as\n an integer.</td></tr>\n <tr><td>-repeaterdest</td><td>Set a VNC repeater address. The next item in the argv array is\n the repeater's address as a string.</td></tr>\n </table>\n\n The host may include a port number (delimited by a ':').\n @param client The client to initialize\n @param argc The number of arguments to the initializer\n @param argv The arguments to the initializer as an array of NULL terminated\n strings\n @return true if the client was initialized successfully, false otherwise."]
    pub fn rfbInitClient(
        client: *mut rfbClient,
        argc: *mut ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
    ) -> rfbBool;
}
extern "C" {
    #[doc = " Cleans up the client structure and releases the memory allocated for it. You\n should call this when you're done with the rfbClient structure that you\n allocated with rfbGetClient().\n @note rfbClientCleanup() does not touch client->frameBuffer.\n @param client The client to clean up"]
    pub fn rfbClientCleanup(client: *mut rfbClient);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::core::ffi::c_uint,
    pub fp_offset: ::core::ffi::c_uint,
    pub overflow_arg_area: *mut ::core::ffi::c_void,
    pub reg_save_area: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::core::mem::MaybeUninit<__va_list_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_source_mgr {
    pub _address: u8,
}
